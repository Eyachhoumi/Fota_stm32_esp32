
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027b4  08008000  08008000  00018000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800a7b4  0800a7b4  0001a7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7cc  0800a7cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7cc  0800a7cc  0001a7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7d4  0800a7d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7d4  0800a7d4  0001a7d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7d8  0800a7d8  0001a7d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800a7dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000049c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004a8  200004a8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000843d  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000019d9  00000000  00000000  000284bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007d8  00000000  00000000  00029e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005f3  00000000  00000000  0002a670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f847  00000000  00000000  0002ac63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00008f49  00000000  00000000  0004a4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bf458  00000000  00000000  000533f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001f00  00000000  00000000  0011284c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0011474c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	2000000c 	.word	0x2000000c
 800801c:	00000000 	.word	0x00000000
 8008020:	0800a79c 	.word	0x0800a79c

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	20000010 	.word	0x20000010
 800803c:	0800a79c 	.word	0x0800a79c

08008040 <__aeabi_uldivmod>:
 8008040:	b953      	cbnz	r3, 8008058 <__aeabi_uldivmod+0x18>
 8008042:	b94a      	cbnz	r2, 8008058 <__aeabi_uldivmod+0x18>
 8008044:	2900      	cmp	r1, #0
 8008046:	bf08      	it	eq
 8008048:	2800      	cmpeq	r0, #0
 800804a:	bf1c      	itt	ne
 800804c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8008050:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008054:	f000 b970 	b.w	8008338 <__aeabi_idiv0>
 8008058:	f1ad 0c08 	sub.w	ip, sp, #8
 800805c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008060:	f000 f806 	bl	8008070 <__udivmoddi4>
 8008064:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008068:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800806c:	b004      	add	sp, #16
 800806e:	4770      	bx	lr

08008070 <__udivmoddi4>:
 8008070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008074:	9e08      	ldr	r6, [sp, #32]
 8008076:	460d      	mov	r5, r1
 8008078:	4604      	mov	r4, r0
 800807a:	460f      	mov	r7, r1
 800807c:	2b00      	cmp	r3, #0
 800807e:	d14a      	bne.n	8008116 <__udivmoddi4+0xa6>
 8008080:	428a      	cmp	r2, r1
 8008082:	4694      	mov	ip, r2
 8008084:	d965      	bls.n	8008152 <__udivmoddi4+0xe2>
 8008086:	fab2 f382 	clz	r3, r2
 800808a:	b143      	cbz	r3, 800809e <__udivmoddi4+0x2e>
 800808c:	fa02 fc03 	lsl.w	ip, r2, r3
 8008090:	f1c3 0220 	rsb	r2, r3, #32
 8008094:	409f      	lsls	r7, r3
 8008096:	fa20 f202 	lsr.w	r2, r0, r2
 800809a:	4317      	orrs	r7, r2
 800809c:	409c      	lsls	r4, r3
 800809e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80080a2:	fa1f f58c 	uxth.w	r5, ip
 80080a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80080aa:	0c22      	lsrs	r2, r4, #16
 80080ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80080b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80080b4:	fb01 f005 	mul.w	r0, r1, r5
 80080b8:	4290      	cmp	r0, r2
 80080ba:	d90a      	bls.n	80080d2 <__udivmoddi4+0x62>
 80080bc:	eb1c 0202 	adds.w	r2, ip, r2
 80080c0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80080c4:	f080 811c 	bcs.w	8008300 <__udivmoddi4+0x290>
 80080c8:	4290      	cmp	r0, r2
 80080ca:	f240 8119 	bls.w	8008300 <__udivmoddi4+0x290>
 80080ce:	3902      	subs	r1, #2
 80080d0:	4462      	add	r2, ip
 80080d2:	1a12      	subs	r2, r2, r0
 80080d4:	b2a4      	uxth	r4, r4
 80080d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80080da:	fb0e 2210 	mls	r2, lr, r0, r2
 80080de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80080e2:	fb00 f505 	mul.w	r5, r0, r5
 80080e6:	42a5      	cmp	r5, r4
 80080e8:	d90a      	bls.n	8008100 <__udivmoddi4+0x90>
 80080ea:	eb1c 0404 	adds.w	r4, ip, r4
 80080ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80080f2:	f080 8107 	bcs.w	8008304 <__udivmoddi4+0x294>
 80080f6:	42a5      	cmp	r5, r4
 80080f8:	f240 8104 	bls.w	8008304 <__udivmoddi4+0x294>
 80080fc:	4464      	add	r4, ip
 80080fe:	3802      	subs	r0, #2
 8008100:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8008104:	1b64      	subs	r4, r4, r5
 8008106:	2100      	movs	r1, #0
 8008108:	b11e      	cbz	r6, 8008112 <__udivmoddi4+0xa2>
 800810a:	40dc      	lsrs	r4, r3
 800810c:	2300      	movs	r3, #0
 800810e:	e9c6 4300 	strd	r4, r3, [r6]
 8008112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008116:	428b      	cmp	r3, r1
 8008118:	d908      	bls.n	800812c <__udivmoddi4+0xbc>
 800811a:	2e00      	cmp	r6, #0
 800811c:	f000 80ed 	beq.w	80082fa <__udivmoddi4+0x28a>
 8008120:	2100      	movs	r1, #0
 8008122:	e9c6 0500 	strd	r0, r5, [r6]
 8008126:	4608      	mov	r0, r1
 8008128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800812c:	fab3 f183 	clz	r1, r3
 8008130:	2900      	cmp	r1, #0
 8008132:	d149      	bne.n	80081c8 <__udivmoddi4+0x158>
 8008134:	42ab      	cmp	r3, r5
 8008136:	d302      	bcc.n	800813e <__udivmoddi4+0xce>
 8008138:	4282      	cmp	r2, r0
 800813a:	f200 80f8 	bhi.w	800832e <__udivmoddi4+0x2be>
 800813e:	1a84      	subs	r4, r0, r2
 8008140:	eb65 0203 	sbc.w	r2, r5, r3
 8008144:	2001      	movs	r0, #1
 8008146:	4617      	mov	r7, r2
 8008148:	2e00      	cmp	r6, #0
 800814a:	d0e2      	beq.n	8008112 <__udivmoddi4+0xa2>
 800814c:	e9c6 4700 	strd	r4, r7, [r6]
 8008150:	e7df      	b.n	8008112 <__udivmoddi4+0xa2>
 8008152:	b902      	cbnz	r2, 8008156 <__udivmoddi4+0xe6>
 8008154:	deff      	udf	#255	; 0xff
 8008156:	fab2 f382 	clz	r3, r2
 800815a:	2b00      	cmp	r3, #0
 800815c:	f040 8090 	bne.w	8008280 <__udivmoddi4+0x210>
 8008160:	1a8a      	subs	r2, r1, r2
 8008162:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008166:	fa1f fe8c 	uxth.w	lr, ip
 800816a:	2101      	movs	r1, #1
 800816c:	fbb2 f5f7 	udiv	r5, r2, r7
 8008170:	fb07 2015 	mls	r0, r7, r5, r2
 8008174:	0c22      	lsrs	r2, r4, #16
 8008176:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800817a:	fb0e f005 	mul.w	r0, lr, r5
 800817e:	4290      	cmp	r0, r2
 8008180:	d908      	bls.n	8008194 <__udivmoddi4+0x124>
 8008182:	eb1c 0202 	adds.w	r2, ip, r2
 8008186:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800818a:	d202      	bcs.n	8008192 <__udivmoddi4+0x122>
 800818c:	4290      	cmp	r0, r2
 800818e:	f200 80cb 	bhi.w	8008328 <__udivmoddi4+0x2b8>
 8008192:	4645      	mov	r5, r8
 8008194:	1a12      	subs	r2, r2, r0
 8008196:	b2a4      	uxth	r4, r4
 8008198:	fbb2 f0f7 	udiv	r0, r2, r7
 800819c:	fb07 2210 	mls	r2, r7, r0, r2
 80081a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80081a4:	fb0e fe00 	mul.w	lr, lr, r0
 80081a8:	45a6      	cmp	lr, r4
 80081aa:	d908      	bls.n	80081be <__udivmoddi4+0x14e>
 80081ac:	eb1c 0404 	adds.w	r4, ip, r4
 80081b0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80081b4:	d202      	bcs.n	80081bc <__udivmoddi4+0x14c>
 80081b6:	45a6      	cmp	lr, r4
 80081b8:	f200 80bb 	bhi.w	8008332 <__udivmoddi4+0x2c2>
 80081bc:	4610      	mov	r0, r2
 80081be:	eba4 040e 	sub.w	r4, r4, lr
 80081c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80081c6:	e79f      	b.n	8008108 <__udivmoddi4+0x98>
 80081c8:	f1c1 0720 	rsb	r7, r1, #32
 80081cc:	408b      	lsls	r3, r1
 80081ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80081d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80081d6:	fa05 f401 	lsl.w	r4, r5, r1
 80081da:	fa20 f307 	lsr.w	r3, r0, r7
 80081de:	40fd      	lsrs	r5, r7
 80081e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80081e4:	4323      	orrs	r3, r4
 80081e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80081ea:	fa1f fe8c 	uxth.w	lr, ip
 80081ee:	fb09 5518 	mls	r5, r9, r8, r5
 80081f2:	0c1c      	lsrs	r4, r3, #16
 80081f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80081f8:	fb08 f50e 	mul.w	r5, r8, lr
 80081fc:	42a5      	cmp	r5, r4
 80081fe:	fa02 f201 	lsl.w	r2, r2, r1
 8008202:	fa00 f001 	lsl.w	r0, r0, r1
 8008206:	d90b      	bls.n	8008220 <__udivmoddi4+0x1b0>
 8008208:	eb1c 0404 	adds.w	r4, ip, r4
 800820c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8008210:	f080 8088 	bcs.w	8008324 <__udivmoddi4+0x2b4>
 8008214:	42a5      	cmp	r5, r4
 8008216:	f240 8085 	bls.w	8008324 <__udivmoddi4+0x2b4>
 800821a:	f1a8 0802 	sub.w	r8, r8, #2
 800821e:	4464      	add	r4, ip
 8008220:	1b64      	subs	r4, r4, r5
 8008222:	b29d      	uxth	r5, r3
 8008224:	fbb4 f3f9 	udiv	r3, r4, r9
 8008228:	fb09 4413 	mls	r4, r9, r3, r4
 800822c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8008230:	fb03 fe0e 	mul.w	lr, r3, lr
 8008234:	45a6      	cmp	lr, r4
 8008236:	d908      	bls.n	800824a <__udivmoddi4+0x1da>
 8008238:	eb1c 0404 	adds.w	r4, ip, r4
 800823c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8008240:	d26c      	bcs.n	800831c <__udivmoddi4+0x2ac>
 8008242:	45a6      	cmp	lr, r4
 8008244:	d96a      	bls.n	800831c <__udivmoddi4+0x2ac>
 8008246:	3b02      	subs	r3, #2
 8008248:	4464      	add	r4, ip
 800824a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800824e:	fba3 9502 	umull	r9, r5, r3, r2
 8008252:	eba4 040e 	sub.w	r4, r4, lr
 8008256:	42ac      	cmp	r4, r5
 8008258:	46c8      	mov	r8, r9
 800825a:	46ae      	mov	lr, r5
 800825c:	d356      	bcc.n	800830c <__udivmoddi4+0x29c>
 800825e:	d053      	beq.n	8008308 <__udivmoddi4+0x298>
 8008260:	b156      	cbz	r6, 8008278 <__udivmoddi4+0x208>
 8008262:	ebb0 0208 	subs.w	r2, r0, r8
 8008266:	eb64 040e 	sbc.w	r4, r4, lr
 800826a:	fa04 f707 	lsl.w	r7, r4, r7
 800826e:	40ca      	lsrs	r2, r1
 8008270:	40cc      	lsrs	r4, r1
 8008272:	4317      	orrs	r7, r2
 8008274:	e9c6 7400 	strd	r7, r4, [r6]
 8008278:	4618      	mov	r0, r3
 800827a:	2100      	movs	r1, #0
 800827c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008280:	f1c3 0120 	rsb	r1, r3, #32
 8008284:	fa02 fc03 	lsl.w	ip, r2, r3
 8008288:	fa20 f201 	lsr.w	r2, r0, r1
 800828c:	fa25 f101 	lsr.w	r1, r5, r1
 8008290:	409d      	lsls	r5, r3
 8008292:	432a      	orrs	r2, r5
 8008294:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8008298:	fa1f fe8c 	uxth.w	lr, ip
 800829c:	fbb1 f0f7 	udiv	r0, r1, r7
 80082a0:	fb07 1510 	mls	r5, r7, r0, r1
 80082a4:	0c11      	lsrs	r1, r2, #16
 80082a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80082aa:	fb00 f50e 	mul.w	r5, r0, lr
 80082ae:	428d      	cmp	r5, r1
 80082b0:	fa04 f403 	lsl.w	r4, r4, r3
 80082b4:	d908      	bls.n	80082c8 <__udivmoddi4+0x258>
 80082b6:	eb1c 0101 	adds.w	r1, ip, r1
 80082ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80082be:	d22f      	bcs.n	8008320 <__udivmoddi4+0x2b0>
 80082c0:	428d      	cmp	r5, r1
 80082c2:	d92d      	bls.n	8008320 <__udivmoddi4+0x2b0>
 80082c4:	3802      	subs	r0, #2
 80082c6:	4461      	add	r1, ip
 80082c8:	1b49      	subs	r1, r1, r5
 80082ca:	b292      	uxth	r2, r2
 80082cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80082d0:	fb07 1115 	mls	r1, r7, r5, r1
 80082d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80082d8:	fb05 f10e 	mul.w	r1, r5, lr
 80082dc:	4291      	cmp	r1, r2
 80082de:	d908      	bls.n	80082f2 <__udivmoddi4+0x282>
 80082e0:	eb1c 0202 	adds.w	r2, ip, r2
 80082e4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80082e8:	d216      	bcs.n	8008318 <__udivmoddi4+0x2a8>
 80082ea:	4291      	cmp	r1, r2
 80082ec:	d914      	bls.n	8008318 <__udivmoddi4+0x2a8>
 80082ee:	3d02      	subs	r5, #2
 80082f0:	4462      	add	r2, ip
 80082f2:	1a52      	subs	r2, r2, r1
 80082f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80082f8:	e738      	b.n	800816c <__udivmoddi4+0xfc>
 80082fa:	4631      	mov	r1, r6
 80082fc:	4630      	mov	r0, r6
 80082fe:	e708      	b.n	8008112 <__udivmoddi4+0xa2>
 8008300:	4639      	mov	r1, r7
 8008302:	e6e6      	b.n	80080d2 <__udivmoddi4+0x62>
 8008304:	4610      	mov	r0, r2
 8008306:	e6fb      	b.n	8008100 <__udivmoddi4+0x90>
 8008308:	4548      	cmp	r0, r9
 800830a:	d2a9      	bcs.n	8008260 <__udivmoddi4+0x1f0>
 800830c:	ebb9 0802 	subs.w	r8, r9, r2
 8008310:	eb65 0e0c 	sbc.w	lr, r5, ip
 8008314:	3b01      	subs	r3, #1
 8008316:	e7a3      	b.n	8008260 <__udivmoddi4+0x1f0>
 8008318:	4645      	mov	r5, r8
 800831a:	e7ea      	b.n	80082f2 <__udivmoddi4+0x282>
 800831c:	462b      	mov	r3, r5
 800831e:	e794      	b.n	800824a <__udivmoddi4+0x1da>
 8008320:	4640      	mov	r0, r8
 8008322:	e7d1      	b.n	80082c8 <__udivmoddi4+0x258>
 8008324:	46d0      	mov	r8, sl
 8008326:	e77b      	b.n	8008220 <__udivmoddi4+0x1b0>
 8008328:	3d02      	subs	r5, #2
 800832a:	4462      	add	r2, ip
 800832c:	e732      	b.n	8008194 <__udivmoddi4+0x124>
 800832e:	4608      	mov	r0, r1
 8008330:	e70a      	b.n	8008148 <__udivmoddi4+0xd8>
 8008332:	4464      	add	r4, ip
 8008334:	3802      	subs	r0, #2
 8008336:	e742      	b.n	80081be <__udivmoddi4+0x14e>

08008338 <__aeabi_idiv0>:
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop

0800833c <ReceiveAndFlashFirmware>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* Function to receive and flash firmware */
void ReceiveAndFlashFirmware(void) {
 800833c:	b5b0      	push	{r4, r5, r7, lr}
 800833e:	f5ad 6d86 	sub.w	sp, sp, #1072	; 0x430
 8008342:	af00      	add	r7, sp, #0
    uint8_t buffer[BUFFER_SIZE];  // Buffer for receiving data
    uint32_t* applicationAddress = (uint32_t*)APPLICATION_ADDRESS;  // Destination address for writing
 8008344:	4b3b      	ldr	r3, [pc, #236]	; (8008434 <ReceiveAndFlashFirmware+0xf8>)
 8008346:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424

    // Configure and erase the Flash sector
    FLASH_EraseInitTypeDef eraseInitStruct;
    uint32_t sectorError;

    eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800834a:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800834e:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8008352:	2200      	movs	r2, #0
 8008354:	601a      	str	r2, [r3, #0]
    eraseInitStruct.Sector = FLASH_SECTOR_2;  // Adjust based on address
 8008356:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800835a:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800835e:	2202      	movs	r2, #2
 8008360:	609a      	str	r2, [r3, #8]
    eraseInitStruct.NbSectors = 6;  // Adjust based on file size
 8008362:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008366:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 800836a:	2206      	movs	r2, #6
 800836c:	60da      	str	r2, [r3, #12]
    eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800836e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8008372:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8008376:	2202      	movs	r2, #2
 8008378:	611a      	str	r2, [r3, #16]

    HAL_FLASH_Unlock();  // Unlock Flash access
 800837a:	f000 fceb 	bl	8008d54 <HAL_FLASH_Unlock>
    HAL_FLASHEx_Erase(&eraseInitStruct, &sectorError);  // Erase sector
 800837e:	1d3a      	adds	r2, r7, #4
 8008380:	f107 0308 	add.w	r3, r7, #8
 8008384:	4611      	mov	r1, r2
 8008386:	4618      	mov	r0, r3
 8008388:	f000 fe46 	bl	8009018 <HAL_FLASHEx_Erase>

    size_t remainingBytes = receivedFileSize;  // Number of bytes left to receive
 800838c:	4b2a      	ldr	r3, [pc, #168]	; (8008438 <ReceiveAndFlashFirmware+0xfc>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
    while (remainingBytes > 0) {
 8008394:	e042      	b.n	800841c <ReceiveAndFlashFirmware+0xe0>
        size_t bytesToReceive = remainingBytes < BUFFER_SIZE ? remainingBytes : BUFFER_SIZE;  // Determine the number of bytes to receive
 8008396:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 800839a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800839e:	bf28      	it	cs
 80083a0:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 80083a4:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
        HAL_UART_Receive(&huart1, buffer, bytesToReceive, HAL_MAX_DELAY);  // Receive data
 80083a8:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 80083ac:	b29a      	uxth	r2, r3
 80083ae:	f107 011c 	add.w	r1, r7, #28
 80083b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083b6:	4821      	ldr	r0, [pc, #132]	; (800843c <ReceiveAndFlashFirmware+0x100>)
 80083b8:	f001 fdee 	bl	8009f98 <HAL_UART_Receive>

        // Write data to Flash
        for (size_t i = 0; i < bytesToReceive; i += 4) {
 80083bc:	2300      	movs	r3, #0
 80083be:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 80083c2:	e01e      	b.n	8008402 <ReceiveAndFlashFirmware+0xc6>
            uint32_t dataToWrite = *(uint32_t*)(buffer + i);  // Read 4 bytes at a time
 80083c4:	f107 021c 	add.w	r2, r7, #28
 80083c8:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 80083cc:	4413      	add	r3, r2
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
            HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)(applicationAddress + i / 4), dataToWrite);  // Write to Flash
 80083d4:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 80083d8:	f023 0303 	bic.w	r3, r3, #3
 80083dc:	f8d7 2424 	ldr.w	r2, [r7, #1060]	; 0x424
 80083e0:	4413      	add	r3, r2
 80083e2:	4619      	mov	r1, r3
 80083e4:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80083e8:	2200      	movs	r2, #0
 80083ea:	461c      	mov	r4, r3
 80083ec:	4615      	mov	r5, r2
 80083ee:	4622      	mov	r2, r4
 80083f0:	462b      	mov	r3, r5
 80083f2:	2002      	movs	r0, #2
 80083f4:	f000 fc5a 	bl	8008cac <HAL_FLASH_Program>
        for (size_t i = 0; i < bytesToReceive; i += 4) {
 80083f8:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 80083fc:	3304      	adds	r3, #4
 80083fe:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 8008402:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 8008406:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 800840a:	429a      	cmp	r2, r3
 800840c:	d3da      	bcc.n	80083c4 <ReceiveAndFlashFirmware+0x88>
        }

        remainingBytes -= bytesToReceive;  // Reduce the number of remaining bytes
 800840e:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 8008412:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8008416:	1ad3      	subs	r3, r2, r3
 8008418:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
    while (remainingBytes > 0) {
 800841c:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1b8      	bne.n	8008396 <ReceiveAndFlashFirmware+0x5a>
    }

    HAL_FLASH_Lock();  // Lock Flash access
 8008424:	f000 fcb8 	bl	8008d98 <HAL_FLASH_Lock>
}
 8008428:	bf00      	nop
 800842a:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 800842e:	46bd      	mov	sp, r7
 8008430:	bdb0      	pop	{r4, r5, r7, pc}
 8008432:	bf00      	nop
 8008434:	08008000 	.word	0x08008000
 8008438:	20000478 	.word	0x20000478
 800843c:	20000028 	.word	0x20000028

08008440 <JumpToApplication>:

/* Function to jump to the application */
void JumpToApplication(void) {
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
    uint32_t jumpAddress = *(__IO uint32_t*)(APPLICATION_ADDRESS + 4);  // Read the application start address
 8008446:	4b09      	ldr	r3, [pc, #36]	; (800846c <JumpToApplication+0x2c>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	60fb      	str	r3, [r7, #12]
    void (*resetHandler)(void) = (void (*)(void))jumpAddress;  // Get the pointer to the reset handler
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	60bb      	str	r3, [r7, #8]

    __set_MSP(*(__IO uint32_t*)APPLICATION_ADDRESS);  // Initialize stack pointer
 8008450:	4b07      	ldr	r3, [pc, #28]	; (8008470 <JumpToApplication+0x30>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f383 8808 	msr	MSP, r3
}
 800845c:	bf00      	nop
    resetHandler();  // Call the reset handler
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	4798      	blx	r3
}
 8008462:	bf00      	nop
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	08008004 	.word	0x08008004
 8008470:	08008000 	.word	0x08008000

08008474 <processReceivedDataSegment>:

/* Function to process received data segments */
void processReceivedDataSegment(uint8_t *data, uint32_t length) {
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
    // Calculate CRC on the received data
    calculatedCRC = HAL_CRC_Accumulate(&hcrc, (uint32_t*)data, length / 4);
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	089b      	lsrs	r3, r3, #2
 8008482:	461a      	mov	r2, r3
 8008484:	6879      	ldr	r1, [r7, #4]
 8008486:	4814      	ldr	r0, [pc, #80]	; (80084d8 <processReceivedDataSegment+0x64>)
 8008488:	f000 fbe5 	bl	8008c56 <HAL_CRC_Accumulate>
 800848c:	4603      	mov	r3, r0
 800848e:	4a13      	ldr	r2, [pc, #76]	; (80084dc <processReceivedDataSegment+0x68>)
 8008490:	6013      	str	r3, [r2, #0]
    // If the data length is not a multiple of 4, process the remaining bytes
    uint32_t remainingBytes = length % 4;
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	f003 0303 	and.w	r3, r3, #3
 8008498:	60fb      	str	r3, [r7, #12]
    if (remainingBytes > 0) {
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d016      	beq.n	80084ce <processReceivedDataSegment+0x5a>
        uint32_t remainingData = 0;
 80084a0:	2300      	movs	r3, #0
 80084a2:	60bb      	str	r3, [r7, #8]
        memcpy(&remainingData, data + length - remainingBytes, remainingBytes);
 80084a4:	683a      	ldr	r2, [r7, #0]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	18d1      	adds	r1, r2, r3
 80084ae:	f107 0308 	add.w	r3, r7, #8
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	4618      	mov	r0, r3
 80084b6:	f002 f963 	bl	800a780 <memcpy>
        calculatedCRC = HAL_CRC_Accumulate(&hcrc, &remainingData, 1);
 80084ba:	f107 0308 	add.w	r3, r7, #8
 80084be:	2201      	movs	r2, #1
 80084c0:	4619      	mov	r1, r3
 80084c2:	4805      	ldr	r0, [pc, #20]	; (80084d8 <processReceivedDataSegment+0x64>)
 80084c4:	f000 fbc7 	bl	8008c56 <HAL_CRC_Accumulate>
 80084c8:	4603      	mov	r3, r0
 80084ca:	4a04      	ldr	r2, [pc, #16]	; (80084dc <processReceivedDataSegment+0x68>)
 80084cc:	6013      	str	r3, [r2, #0]
    }
}
 80084ce:	bf00      	nop
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	bf00      	nop
 80084d8:	20000070 	.word	0x20000070
 80084dc:	20000480 	.word	0x20000480

080084e0 <processReceivedData>:

/* Function to process received data */
void processReceivedData(void) {
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
    uint32_t bytesRemaining = receivedFileSize;
 80084e6:	4b29      	ldr	r3, [pc, #164]	; (800858c <processReceivedData+0xac>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	607b      	str	r3, [r7, #4]
    uint32_t bytesToReceive;

    // Reset CRC before starting
    __HAL_CRC_DR_RESET(&hcrc);
 80084ec:	4b28      	ldr	r3, [pc, #160]	; (8008590 <processReceivedData+0xb0>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	689a      	ldr	r2, [r3, #8]
 80084f2:	4b27      	ldr	r3, [pc, #156]	; (8008590 <processReceivedData+0xb0>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f042 0201 	orr.w	r2, r2, #1
 80084fa:	609a      	str	r2, [r3, #8]

    while (bytesRemaining > 0) {
 80084fc:	e020      	b.n	8008540 <processReceivedData+0x60>
        bytesToReceive = (bytesRemaining > sizeof(fileData)) ? sizeof(fileData) : bytesRemaining;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008504:	bf28      	it	cs
 8008506:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 800850a:	603b      	str	r3, [r7, #0]

        // Receive a segment of the file
        if (HAL_UART_Receive(&huart1, fileData, bytesToReceive, HAL_MAX_DELAY) != HAL_OK) {
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	b29a      	uxth	r2, r3
 8008510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008514:	491f      	ldr	r1, [pc, #124]	; (8008594 <processReceivedData+0xb4>)
 8008516:	4820      	ldr	r0, [pc, #128]	; (8008598 <processReceivedData+0xb8>)
 8008518:	f001 fd3e 	bl	8009f98 <HAL_UART_Receive>
 800851c:	4603      	mov	r3, r0
 800851e:	2b00      	cmp	r3, #0
 8008520:	d006      	beq.n	8008530 <processReceivedData+0x50>
            // Handle reception errors
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // LED12 on error
 8008522:	2201      	movs	r2, #1
 8008524:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008528:	481c      	ldr	r0, [pc, #112]	; (800859c <processReceivedData+0xbc>)
 800852a:	f001 f833 	bl	8009594 <HAL_GPIO_WritePin>
            return;
 800852e:	e029      	b.n	8008584 <processReceivedData+0xa4>
        }

        // Process the received segment
        processReceivedDataSegment(fileData, bytesToReceive);
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	4818      	ldr	r0, [pc, #96]	; (8008594 <processReceivedData+0xb4>)
 8008534:	f7ff ff9e 	bl	8008474 <processReceivedDataSegment>

        bytesRemaining -= bytesToReceive;
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	607b      	str	r3, [r7, #4]
    while (bytesRemaining > 0) {
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1db      	bne.n	80084fe <processReceivedData+0x1e>
    }

    // Compare the calculated CRC with the received CRC
    if (calculatedCRC == receivedCRC) {
 8008546:	4b16      	ldr	r3, [pc, #88]	; (80085a0 <processReceivedData+0xc0>)
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	4b16      	ldr	r3, [pc, #88]	; (80085a4 <processReceivedData+0xc4>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	429a      	cmp	r2, r3
 8008550:	d10c      	bne.n	800856c <processReceivedData+0x8c>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // LED13 on
 8008552:	2201      	movs	r2, #1
 8008554:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008558:	4810      	ldr	r0, [pc, #64]	; (800859c <processReceivedData+0xbc>)
 800855a:	f001 f81b 	bl	8009594 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET); // LED12 off
 800855e:	2200      	movs	r2, #0
 8008560:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008564:	480d      	ldr	r0, [pc, #52]	; (800859c <processReceivedData+0xbc>)
 8008566:	f001 f815 	bl	8009594 <HAL_GPIO_WritePin>
 800856a:	e00b      	b.n	8008584 <processReceivedData+0xa4>
    } else {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET); // LED13 off
 800856c:	2200      	movs	r2, #0
 800856e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008572:	480a      	ldr	r0, [pc, #40]	; (800859c <processReceivedData+0xbc>)
 8008574:	f001 f80e 	bl	8009594 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // LED12 on
 8008578:	2201      	movs	r2, #1
 800857a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800857e:	4807      	ldr	r0, [pc, #28]	; (800859c <processReceivedData+0xbc>)
 8008580:	f001 f808 	bl	8009594 <HAL_GPIO_WritePin>
    }
}
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	20000478 	.word	0x20000478
 8008590:	20000070 	.word	0x20000070
 8008594:	20000078 	.word	0x20000078
 8008598:	20000028 	.word	0x20000028
 800859c:	40020c00 	.word	0x40020c00
 80085a0:	20000480 	.word	0x20000480
 80085a4:	2000047c 	.word	0x2000047c

080085a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80085ac:	f000 f9e0 	bl	8008970 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80085b0:	f000 f822 	bl	80085f8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80085b4:	f000 f8c6 	bl	8008744 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80085b8:	f000 f886 	bl	80086c8 <MX_USART1_UART_Init>
  MX_CRC_Init();
 80085bc:	f000 f8ae 	bl	800871c <MX_CRC_Init>

  /* USER CODE BEGIN 2 */
  // Receive the file size (4 bytes)
  HAL_UART_Receive(&huart1, (uint8_t*)&receivedFileSize, sizeof(receivedFileSize), HAL_MAX_DELAY);
 80085c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085c4:	2204      	movs	r2, #4
 80085c6:	4909      	ldr	r1, [pc, #36]	; (80085ec <main+0x44>)
 80085c8:	4809      	ldr	r0, [pc, #36]	; (80085f0 <main+0x48>)
 80085ca:	f001 fce5 	bl	8009f98 <HAL_UART_Receive>

  // Receive the CRC (4 bytes for CRC-32)
  HAL_UART_Receive(&huart1, (uint8_t*)&receivedCRC, sizeof(receivedCRC), HAL_MAX_DELAY);
 80085ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085d2:	2204      	movs	r2, #4
 80085d4:	4907      	ldr	r1, [pc, #28]	; (80085f4 <main+0x4c>)
 80085d6:	4806      	ldr	r0, [pc, #24]	; (80085f0 <main+0x48>)
 80085d8:	f001 fcde 	bl	8009f98 <HAL_UART_Receive>

  // Process the received data in segments
  processReceivedData();
 80085dc:	f7ff ff80 	bl	80084e0 <processReceivedData>

  // Flash the firmware
  ReceiveAndFlashFirmware();
 80085e0:	f7ff feac 	bl	800833c <ReceiveAndFlashFirmware>

  // Jump to the updated application
  JumpToApplication();
 80085e4:	f7ff ff2c 	bl	8008440 <JumpToApplication>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1) {
 80085e8:	e7fe      	b.n	80085e8 <main+0x40>
 80085ea:	bf00      	nop
 80085ec:	20000478 	.word	0x20000478
 80085f0:	20000028 	.word	0x20000028
 80085f4:	2000047c 	.word	0x2000047c

080085f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b094      	sub	sp, #80	; 0x50
 80085fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80085fe:	f107 0320 	add.w	r3, r7, #32
 8008602:	2230      	movs	r2, #48	; 0x30
 8008604:	2100      	movs	r1, #0
 8008606:	4618      	mov	r0, r3
 8008608:	f002 f88e 	bl	800a728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800860c:	f107 030c 	add.w	r3, r7, #12
 8008610:	2200      	movs	r2, #0
 8008612:	601a      	str	r2, [r3, #0]
 8008614:	605a      	str	r2, [r3, #4]
 8008616:	609a      	str	r2, [r3, #8]
 8008618:	60da      	str	r2, [r3, #12]
 800861a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800861c:	2300      	movs	r3, #0
 800861e:	60bb      	str	r3, [r7, #8]
 8008620:	4b27      	ldr	r3, [pc, #156]	; (80086c0 <SystemClock_Config+0xc8>)
 8008622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008624:	4a26      	ldr	r2, [pc, #152]	; (80086c0 <SystemClock_Config+0xc8>)
 8008626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800862a:	6413      	str	r3, [r2, #64]	; 0x40
 800862c:	4b24      	ldr	r3, [pc, #144]	; (80086c0 <SystemClock_Config+0xc8>)
 800862e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008634:	60bb      	str	r3, [r7, #8]
 8008636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008638:	2300      	movs	r3, #0
 800863a:	607b      	str	r3, [r7, #4]
 800863c:	4b21      	ldr	r3, [pc, #132]	; (80086c4 <SystemClock_Config+0xcc>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a20      	ldr	r2, [pc, #128]	; (80086c4 <SystemClock_Config+0xcc>)
 8008642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008646:	6013      	str	r3, [r2, #0]
 8008648:	4b1e      	ldr	r3, [pc, #120]	; (80086c4 <SystemClock_Config+0xcc>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008650:	607b      	str	r3, [r7, #4]
 8008652:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008654:	2302      	movs	r3, #2
 8008656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008658:	2301      	movs	r3, #1
 800865a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800865c:	2310      	movs	r3, #16
 800865e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008660:	2302      	movs	r3, #2
 8008662:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008664:	2300      	movs	r3, #0
 8008666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008668:	2308      	movs	r3, #8
 800866a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800866c:	2332      	movs	r3, #50	; 0x32
 800866e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8008670:	2304      	movs	r3, #4
 8008672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8008674:	2307      	movs	r3, #7
 8008676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008678:	f107 0320 	add.w	r3, r7, #32
 800867c:	4618      	mov	r0, r3
 800867e:	f000 ffa3 	bl	80095c8 <HAL_RCC_OscConfig>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d001      	beq.n	800868c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8008688:	f000 f876 	bl	8008778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800868c:	230f      	movs	r3, #15
 800868e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008690:	2302      	movs	r3, #2
 8008692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008694:	2300      	movs	r3, #0
 8008696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800869c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800869e:	2300      	movs	r3, #0
 80086a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80086a2:	f107 030c 	add.w	r3, r7, #12
 80086a6:	2101      	movs	r1, #1
 80086a8:	4618      	mov	r0, r3
 80086aa:	f001 fa05 	bl	8009ab8 <HAL_RCC_ClockConfig>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d001      	beq.n	80086b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80086b4:	f000 f860 	bl	8008778 <Error_Handler>
  }
}
 80086b8:	bf00      	nop
 80086ba:	3750      	adds	r7, #80	; 0x50
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	40023800 	.word	0x40023800
 80086c4:	40007000 	.word	0x40007000

080086c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80086cc:	4b11      	ldr	r3, [pc, #68]	; (8008714 <MX_USART1_UART_Init+0x4c>)
 80086ce:	4a12      	ldr	r2, [pc, #72]	; (8008718 <MX_USART1_UART_Init+0x50>)
 80086d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80086d2:	4b10      	ldr	r3, [pc, #64]	; (8008714 <MX_USART1_UART_Init+0x4c>)
 80086d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80086d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80086da:	4b0e      	ldr	r3, [pc, #56]	; (8008714 <MX_USART1_UART_Init+0x4c>)
 80086dc:	2200      	movs	r2, #0
 80086de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80086e0:	4b0c      	ldr	r3, [pc, #48]	; (8008714 <MX_USART1_UART_Init+0x4c>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80086e6:	4b0b      	ldr	r3, [pc, #44]	; (8008714 <MX_USART1_UART_Init+0x4c>)
 80086e8:	2200      	movs	r2, #0
 80086ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80086ec:	4b09      	ldr	r3, [pc, #36]	; (8008714 <MX_USART1_UART_Init+0x4c>)
 80086ee:	220c      	movs	r2, #12
 80086f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80086f2:	4b08      	ldr	r3, [pc, #32]	; (8008714 <MX_USART1_UART_Init+0x4c>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80086f8:	4b06      	ldr	r3, [pc, #24]	; (8008714 <MX_USART1_UART_Init+0x4c>)
 80086fa:	2200      	movs	r2, #0
 80086fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80086fe:	4805      	ldr	r0, [pc, #20]	; (8008714 <MX_USART1_UART_Init+0x4c>)
 8008700:	f001 fbfa 	bl	8009ef8 <HAL_UART_Init>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800870a:	f000 f835 	bl	8008778 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */
}
 800870e:	bf00      	nop
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	20000028 	.word	0x20000028
 8008718:	40011000 	.word	0x40011000

0800871c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CRC_Init 0 */
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */
  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8008720:	4b06      	ldr	r3, [pc, #24]	; (800873c <MX_CRC_Init+0x20>)
 8008722:	4a07      	ldr	r2, [pc, #28]	; (8008740 <MX_CRC_Init+0x24>)
 8008724:	601a      	str	r2, [r3, #0]

  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008726:	4805      	ldr	r0, [pc, #20]	; (800873c <MX_CRC_Init+0x20>)
 8008728:	f000 fa79 	bl	8008c1e <HAL_CRC_Init>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d001      	beq.n	8008736 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8008732:	f000 f821 	bl	8008778 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */
  /* USER CODE END CRC_Init 2 */
}
 8008736:	bf00      	nop
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	20000070 	.word	0x20000070
 8008740:	40023000 	.word	0x40023000

08008744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800874a:	2300      	movs	r3, #0
 800874c:	607b      	str	r3, [r7, #4]
 800874e:	4b09      	ldr	r3, [pc, #36]	; (8008774 <MX_GPIO_Init+0x30>)
 8008750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008752:	4a08      	ldr	r2, [pc, #32]	; (8008774 <MX_GPIO_Init+0x30>)
 8008754:	f043 0308 	orr.w	r3, r3, #8
 8008758:	6313      	str	r3, [r2, #48]	; 0x30
 800875a:	4b06      	ldr	r3, [pc, #24]	; (8008774 <MX_GPIO_Init+0x30>)
 800875c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800875e:	f003 0308 	and.w	r3, r3, #8
 8008762:	607b      	str	r3, [r7, #4]
 8008764:	687b      	ldr	r3, [r7, #4]
}
 8008766:	bf00      	nop
 8008768:	370c      	adds	r7, #12
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	40023800 	.word	0x40023800

08008778 <Error_Handler>:

/* USER CODE BEGIN 4 */
void Error_Handler(void)
{
 8008778:	b480      	push	{r7}
 800877a:	af00      	add	r7, sp, #0
  while(1) {
 800877c:	e7fe      	b.n	800877c <Error_Handler+0x4>
	...

08008780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008786:	2300      	movs	r3, #0
 8008788:	607b      	str	r3, [r7, #4]
 800878a:	4b10      	ldr	r3, [pc, #64]	; (80087cc <HAL_MspInit+0x4c>)
 800878c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800878e:	4a0f      	ldr	r2, [pc, #60]	; (80087cc <HAL_MspInit+0x4c>)
 8008790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008794:	6453      	str	r3, [r2, #68]	; 0x44
 8008796:	4b0d      	ldr	r3, [pc, #52]	; (80087cc <HAL_MspInit+0x4c>)
 8008798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800879a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800879e:	607b      	str	r3, [r7, #4]
 80087a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80087a2:	2300      	movs	r3, #0
 80087a4:	603b      	str	r3, [r7, #0]
 80087a6:	4b09      	ldr	r3, [pc, #36]	; (80087cc <HAL_MspInit+0x4c>)
 80087a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087aa:	4a08      	ldr	r2, [pc, #32]	; (80087cc <HAL_MspInit+0x4c>)
 80087ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087b0:	6413      	str	r3, [r2, #64]	; 0x40
 80087b2:	4b06      	ldr	r3, [pc, #24]	; (80087cc <HAL_MspInit+0x4c>)
 80087b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087ba:	603b      	str	r3, [r7, #0]
 80087bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80087be:	2007      	movs	r0, #7
 80087c0:	f000 f9fa 	bl	8008bb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80087c4:	bf00      	nop
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	40023800 	.word	0x40023800

080087d0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a0b      	ldr	r2, [pc, #44]	; (800880c <HAL_CRC_MspInit+0x3c>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d10d      	bne.n	80087fe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80087e2:	2300      	movs	r3, #0
 80087e4:	60fb      	str	r3, [r7, #12]
 80087e6:	4b0a      	ldr	r3, [pc, #40]	; (8008810 <HAL_CRC_MspInit+0x40>)
 80087e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ea:	4a09      	ldr	r2, [pc, #36]	; (8008810 <HAL_CRC_MspInit+0x40>)
 80087ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80087f0:	6313      	str	r3, [r2, #48]	; 0x30
 80087f2:	4b07      	ldr	r3, [pc, #28]	; (8008810 <HAL_CRC_MspInit+0x40>)
 80087f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80087fa:	60fb      	str	r3, [r7, #12]
 80087fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80087fe:	bf00      	nop
 8008800:	3714      	adds	r7, #20
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	40023000 	.word	0x40023000
 8008810:	40023800 	.word	0x40023800

08008814 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b08a      	sub	sp, #40	; 0x28
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800881c:	f107 0314 	add.w	r3, r7, #20
 8008820:	2200      	movs	r2, #0
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	605a      	str	r2, [r3, #4]
 8008826:	609a      	str	r2, [r3, #8]
 8008828:	60da      	str	r2, [r3, #12]
 800882a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a19      	ldr	r2, [pc, #100]	; (8008898 <HAL_UART_MspInit+0x84>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d12c      	bne.n	8008890 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008836:	2300      	movs	r3, #0
 8008838:	613b      	str	r3, [r7, #16]
 800883a:	4b18      	ldr	r3, [pc, #96]	; (800889c <HAL_UART_MspInit+0x88>)
 800883c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800883e:	4a17      	ldr	r2, [pc, #92]	; (800889c <HAL_UART_MspInit+0x88>)
 8008840:	f043 0310 	orr.w	r3, r3, #16
 8008844:	6453      	str	r3, [r2, #68]	; 0x44
 8008846:	4b15      	ldr	r3, [pc, #84]	; (800889c <HAL_UART_MspInit+0x88>)
 8008848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800884a:	f003 0310 	and.w	r3, r3, #16
 800884e:	613b      	str	r3, [r7, #16]
 8008850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008852:	2300      	movs	r3, #0
 8008854:	60fb      	str	r3, [r7, #12]
 8008856:	4b11      	ldr	r3, [pc, #68]	; (800889c <HAL_UART_MspInit+0x88>)
 8008858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800885a:	4a10      	ldr	r2, [pc, #64]	; (800889c <HAL_UART_MspInit+0x88>)
 800885c:	f043 0301 	orr.w	r3, r3, #1
 8008860:	6313      	str	r3, [r2, #48]	; 0x30
 8008862:	4b0e      	ldr	r3, [pc, #56]	; (800889c <HAL_UART_MspInit+0x88>)
 8008864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	60fb      	str	r3, [r7, #12]
 800886c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800886e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008874:	2302      	movs	r3, #2
 8008876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008878:	2300      	movs	r3, #0
 800887a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800887c:	2303      	movs	r3, #3
 800887e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008880:	2307      	movs	r3, #7
 8008882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008884:	f107 0314 	add.w	r3, r7, #20
 8008888:	4619      	mov	r1, r3
 800888a:	4805      	ldr	r0, [pc, #20]	; (80088a0 <HAL_UART_MspInit+0x8c>)
 800888c:	f000 fce6 	bl	800925c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008890:	bf00      	nop
 8008892:	3728      	adds	r7, #40	; 0x28
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	40011000 	.word	0x40011000
 800889c:	40023800 	.word	0x40023800
 80088a0:	40020000 	.word	0x40020000

080088a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80088a4:	b480      	push	{r7}
 80088a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80088a8:	e7fe      	b.n	80088a8 <NMI_Handler+0x4>

080088aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80088aa:	b480      	push	{r7}
 80088ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80088ae:	e7fe      	b.n	80088ae <HardFault_Handler+0x4>

080088b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80088b0:	b480      	push	{r7}
 80088b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80088b4:	e7fe      	b.n	80088b4 <MemManage_Handler+0x4>

080088b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80088b6:	b480      	push	{r7}
 80088b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80088ba:	e7fe      	b.n	80088ba <BusFault_Handler+0x4>

080088bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80088bc:	b480      	push	{r7}
 80088be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80088c0:	e7fe      	b.n	80088c0 <UsageFault_Handler+0x4>

080088c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80088c2:	b480      	push	{r7}
 80088c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80088c6:	bf00      	nop
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80088d0:	b480      	push	{r7}
 80088d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80088d4:	bf00      	nop
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80088de:	b480      	push	{r7}
 80088e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80088e2:	bf00      	nop
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80088f0:	f000 f890 	bl	8008a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80088f4:	bf00      	nop
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80088f8:	b480      	push	{r7}
 80088fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80088fc:	4b06      	ldr	r3, [pc, #24]	; (8008918 <SystemInit+0x20>)
 80088fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008902:	4a05      	ldr	r2, [pc, #20]	; (8008918 <SystemInit+0x20>)
 8008904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800890c:	bf00      	nop
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	e000ed00 	.word	0xe000ed00

0800891c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800891c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008954 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8008920:	f7ff ffea 	bl	80088f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008924:	480c      	ldr	r0, [pc, #48]	; (8008958 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008926:	490d      	ldr	r1, [pc, #52]	; (800895c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008928:	4a0d      	ldr	r2, [pc, #52]	; (8008960 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800892a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800892c:	e002      	b.n	8008934 <LoopCopyDataInit>

0800892e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800892e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008932:	3304      	adds	r3, #4

08008934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008938:	d3f9      	bcc.n	800892e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800893a:	4a0a      	ldr	r2, [pc, #40]	; (8008964 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800893c:	4c0a      	ldr	r4, [pc, #40]	; (8008968 <LoopFillZerobss+0x22>)
  movs r3, #0
 800893e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008940:	e001      	b.n	8008946 <LoopFillZerobss>

08008942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008944:	3204      	adds	r2, #4

08008946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008948:	d3fb      	bcc.n	8008942 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800894a:	f001 fef5 	bl	800a738 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800894e:	f7ff fe2b 	bl	80085a8 <main>
  bx  lr    
 8008952:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008954:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800895c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8008960:	0800a7dc 	.word	0x0800a7dc
  ldr r2, =_sbss
 8008964:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8008968:	200004a8 	.word	0x200004a8

0800896c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800896c:	e7fe      	b.n	800896c <ADC_IRQHandler>
	...

08008970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008974:	4b0e      	ldr	r3, [pc, #56]	; (80089b0 <HAL_Init+0x40>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a0d      	ldr	r2, [pc, #52]	; (80089b0 <HAL_Init+0x40>)
 800897a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800897e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008980:	4b0b      	ldr	r3, [pc, #44]	; (80089b0 <HAL_Init+0x40>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a0a      	ldr	r2, [pc, #40]	; (80089b0 <HAL_Init+0x40>)
 8008986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800898a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800898c:	4b08      	ldr	r3, [pc, #32]	; (80089b0 <HAL_Init+0x40>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a07      	ldr	r2, [pc, #28]	; (80089b0 <HAL_Init+0x40>)
 8008992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008998:	2003      	movs	r0, #3
 800899a:	f000 f90d 	bl	8008bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800899e:	2000      	movs	r0, #0
 80089a0:	f000 f808 	bl	80089b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80089a4:	f7ff feec 	bl	8008780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	40023c00 	.word	0x40023c00

080089b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80089bc:	4b12      	ldr	r3, [pc, #72]	; (8008a08 <HAL_InitTick+0x54>)
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	4b12      	ldr	r3, [pc, #72]	; (8008a0c <HAL_InitTick+0x58>)
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	4619      	mov	r1, r3
 80089c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80089ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80089ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80089d2:	4618      	mov	r0, r3
 80089d4:	f000 f917 	bl	8008c06 <HAL_SYSTICK_Config>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d001      	beq.n	80089e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e00e      	b.n	8008a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2b0f      	cmp	r3, #15
 80089e6:	d80a      	bhi.n	80089fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80089e8:	2200      	movs	r2, #0
 80089ea:	6879      	ldr	r1, [r7, #4]
 80089ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089f0:	f000 f8ed 	bl	8008bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80089f4:	4a06      	ldr	r2, [pc, #24]	; (8008a10 <HAL_InitTick+0x5c>)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	e000      	b.n	8008a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	20000000 	.word	0x20000000
 8008a0c:	20000008 	.word	0x20000008
 8008a10:	20000004 	.word	0x20000004

08008a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008a14:	b480      	push	{r7}
 8008a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008a18:	4b06      	ldr	r3, [pc, #24]	; (8008a34 <HAL_IncTick+0x20>)
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	4b06      	ldr	r3, [pc, #24]	; (8008a38 <HAL_IncTick+0x24>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4413      	add	r3, r2
 8008a24:	4a04      	ldr	r2, [pc, #16]	; (8008a38 <HAL_IncTick+0x24>)
 8008a26:	6013      	str	r3, [r2, #0]
}
 8008a28:	bf00      	nop
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	20000008 	.word	0x20000008
 8008a38:	20000484 	.word	0x20000484

08008a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8008a40:	4b03      	ldr	r3, [pc, #12]	; (8008a50 <HAL_GetTick+0x14>)
 8008a42:	681b      	ldr	r3, [r3, #0]
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	20000484 	.word	0x20000484

08008a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b085      	sub	sp, #20
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f003 0307 	and.w	r3, r3, #7
 8008a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a64:	4b0c      	ldr	r3, [pc, #48]	; (8008a98 <__NVIC_SetPriorityGrouping+0x44>)
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a6a:	68ba      	ldr	r2, [r7, #8]
 8008a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008a70:	4013      	ands	r3, r2
 8008a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008a86:	4a04      	ldr	r2, [pc, #16]	; (8008a98 <__NVIC_SetPriorityGrouping+0x44>)
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	60d3      	str	r3, [r2, #12]
}
 8008a8c:	bf00      	nop
 8008a8e:	3714      	adds	r7, #20
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr
 8008a98:	e000ed00 	.word	0xe000ed00

08008a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008aa0:	4b04      	ldr	r3, [pc, #16]	; (8008ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	0a1b      	lsrs	r3, r3, #8
 8008aa6:	f003 0307 	and.w	r3, r3, #7
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr
 8008ab4:	e000ed00 	.word	0xe000ed00

08008ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	4603      	mov	r3, r0
 8008ac0:	6039      	str	r1, [r7, #0]
 8008ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	db0a      	blt.n	8008ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	490c      	ldr	r1, [pc, #48]	; (8008b04 <__NVIC_SetPriority+0x4c>)
 8008ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ad6:	0112      	lsls	r2, r2, #4
 8008ad8:	b2d2      	uxtb	r2, r2
 8008ada:	440b      	add	r3, r1
 8008adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008ae0:	e00a      	b.n	8008af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	4908      	ldr	r1, [pc, #32]	; (8008b08 <__NVIC_SetPriority+0x50>)
 8008ae8:	79fb      	ldrb	r3, [r7, #7]
 8008aea:	f003 030f 	and.w	r3, r3, #15
 8008aee:	3b04      	subs	r3, #4
 8008af0:	0112      	lsls	r2, r2, #4
 8008af2:	b2d2      	uxtb	r2, r2
 8008af4:	440b      	add	r3, r1
 8008af6:	761a      	strb	r2, [r3, #24]
}
 8008af8:	bf00      	nop
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr
 8008b04:	e000e100 	.word	0xe000e100
 8008b08:	e000ed00 	.word	0xe000ed00

08008b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b089      	sub	sp, #36	; 0x24
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f003 0307 	and.w	r3, r3, #7
 8008b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	f1c3 0307 	rsb	r3, r3, #7
 8008b26:	2b04      	cmp	r3, #4
 8008b28:	bf28      	it	cs
 8008b2a:	2304      	movcs	r3, #4
 8008b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	3304      	adds	r3, #4
 8008b32:	2b06      	cmp	r3, #6
 8008b34:	d902      	bls.n	8008b3c <NVIC_EncodePriority+0x30>
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	3b03      	subs	r3, #3
 8008b3a:	e000      	b.n	8008b3e <NVIC_EncodePriority+0x32>
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b44:	69bb      	ldr	r3, [r7, #24]
 8008b46:	fa02 f303 	lsl.w	r3, r2, r3
 8008b4a:	43da      	mvns	r2, r3
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	401a      	ands	r2, r3
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008b54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b5e:	43d9      	mvns	r1, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b64:	4313      	orrs	r3, r2
         );
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3724      	adds	r7, #36	; 0x24
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
	...

08008b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3b01      	subs	r3, #1
 8008b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b84:	d301      	bcc.n	8008b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008b86:	2301      	movs	r3, #1
 8008b88:	e00f      	b.n	8008baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008b8a:	4a0a      	ldr	r2, [pc, #40]	; (8008bb4 <SysTick_Config+0x40>)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008b92:	210f      	movs	r1, #15
 8008b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b98:	f7ff ff8e 	bl	8008ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008b9c:	4b05      	ldr	r3, [pc, #20]	; (8008bb4 <SysTick_Config+0x40>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008ba2:	4b04      	ldr	r3, [pc, #16]	; (8008bb4 <SysTick_Config+0x40>)
 8008ba4:	2207      	movs	r2, #7
 8008ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	e000e010 	.word	0xe000e010

08008bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f7ff ff47 	bl	8008a54 <__NVIC_SetPriorityGrouping>
}
 8008bc6:	bf00      	nop
 8008bc8:	3708      	adds	r7, #8
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b086      	sub	sp, #24
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	60b9      	str	r1, [r7, #8]
 8008bd8:	607a      	str	r2, [r7, #4]
 8008bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008be0:	f7ff ff5c 	bl	8008a9c <__NVIC_GetPriorityGrouping>
 8008be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	68b9      	ldr	r1, [r7, #8]
 8008bea:	6978      	ldr	r0, [r7, #20]
 8008bec:	f7ff ff8e 	bl	8008b0c <NVIC_EncodePriority>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bf6:	4611      	mov	r1, r2
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7ff ff5d 	bl	8008ab8 <__NVIC_SetPriority>
}
 8008bfe:	bf00      	nop
 8008c00:	3718      	adds	r7, #24
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b082      	sub	sp, #8
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7ff ffb0 	bl	8008b74 <SysTick_Config>
 8008c14:	4603      	mov	r3, r0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3708      	adds	r7, #8
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b082      	sub	sp, #8
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d101      	bne.n	8008c30 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e00e      	b.n	8008c4e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	795b      	ldrb	r3, [r3, #5]
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d105      	bne.n	8008c46 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f7ff fdc5 	bl	80087d0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8008c56:	b480      	push	{r7}
 8008c58:	b087      	sub	sp, #28
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	60f8      	str	r0, [r7, #12]
 8008c5e:	60b9      	str	r1, [r7, #8]
 8008c60:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8008c62:	2300      	movs	r3, #0
 8008c64:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2202      	movs	r2, #2
 8008c6a:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	617b      	str	r3, [r7, #20]
 8008c70:	e00a      	b.n	8008c88 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	68ba      	ldr	r2, [r7, #8]
 8008c78:	441a      	add	r2, r3
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	6812      	ldr	r2, [r2, #0]
 8008c80:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	3301      	adds	r3, #1
 8008c86:	617b      	str	r3, [r7, #20]
 8008c88:	697a      	ldr	r2, [r7, #20]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d3f0      	bcc.n	8008c72 <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8008c9e:	693b      	ldr	r3, [r7, #16]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	371c      	adds	r7, #28
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008cbe:	4b23      	ldr	r3, [pc, #140]	; (8008d4c <HAL_FLASH_Program+0xa0>)
 8008cc0:	7e1b      	ldrb	r3, [r3, #24]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d101      	bne.n	8008cca <HAL_FLASH_Program+0x1e>
 8008cc6:	2302      	movs	r3, #2
 8008cc8:	e03b      	b.n	8008d42 <HAL_FLASH_Program+0x96>
 8008cca:	4b20      	ldr	r3, [pc, #128]	; (8008d4c <HAL_FLASH_Program+0xa0>)
 8008ccc:	2201      	movs	r2, #1
 8008cce:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008cd0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008cd4:	f000 f870 	bl	8008db8 <FLASH_WaitForLastOperation>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8008cdc:	7dfb      	ldrb	r3, [r7, #23]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d12b      	bne.n	8008d3a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d105      	bne.n	8008cf4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8008ce8:	783b      	ldrb	r3, [r7, #0]
 8008cea:	4619      	mov	r1, r3
 8008cec:	68b8      	ldr	r0, [r7, #8]
 8008cee:	f000 f91b 	bl	8008f28 <FLASH_Program_Byte>
 8008cf2:	e016      	b.n	8008d22 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d105      	bne.n	8008d06 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8008cfa:	883b      	ldrh	r3, [r7, #0]
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	68b8      	ldr	r0, [r7, #8]
 8008d00:	f000 f8ee 	bl	8008ee0 <FLASH_Program_HalfWord>
 8008d04:	e00d      	b.n	8008d22 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d105      	bne.n	8008d18 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	68b8      	ldr	r0, [r7, #8]
 8008d12:	f000 f8c3 	bl	8008e9c <FLASH_Program_Word>
 8008d16:	e004      	b.n	8008d22 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8008d18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d1c:	68b8      	ldr	r0, [r7, #8]
 8008d1e:	f000 f88b 	bl	8008e38 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008d22:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008d26:	f000 f847 	bl	8008db8 <FLASH_WaitForLastOperation>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8008d2e:	4b08      	ldr	r3, [pc, #32]	; (8008d50 <HAL_FLASH_Program+0xa4>)
 8008d30:	691b      	ldr	r3, [r3, #16]
 8008d32:	4a07      	ldr	r2, [pc, #28]	; (8008d50 <HAL_FLASH_Program+0xa4>)
 8008d34:	f023 0301 	bic.w	r3, r3, #1
 8008d38:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008d3a:	4b04      	ldr	r3, [pc, #16]	; (8008d4c <HAL_FLASH_Program+0xa0>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8008d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3718      	adds	r7, #24
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}
 8008d4a:	bf00      	nop
 8008d4c:	20000488 	.word	0x20000488
 8008d50:	40023c00 	.word	0x40023c00

08008d54 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008d5e:	4b0b      	ldr	r3, [pc, #44]	; (8008d8c <HAL_FLASH_Unlock+0x38>)
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	da0b      	bge.n	8008d7e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008d66:	4b09      	ldr	r3, [pc, #36]	; (8008d8c <HAL_FLASH_Unlock+0x38>)
 8008d68:	4a09      	ldr	r2, [pc, #36]	; (8008d90 <HAL_FLASH_Unlock+0x3c>)
 8008d6a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008d6c:	4b07      	ldr	r3, [pc, #28]	; (8008d8c <HAL_FLASH_Unlock+0x38>)
 8008d6e:	4a09      	ldr	r2, [pc, #36]	; (8008d94 <HAL_FLASH_Unlock+0x40>)
 8008d70:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008d72:	4b06      	ldr	r3, [pc, #24]	; (8008d8c <HAL_FLASH_Unlock+0x38>)
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	da01      	bge.n	8008d7e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8008d7e:	79fb      	ldrb	r3, [r7, #7]
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr
 8008d8c:	40023c00 	.word	0x40023c00
 8008d90:	45670123 	.word	0x45670123
 8008d94:	cdef89ab 	.word	0xcdef89ab

08008d98 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8008d9c:	4b05      	ldr	r3, [pc, #20]	; (8008db4 <HAL_FLASH_Lock+0x1c>)
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	4a04      	ldr	r2, [pc, #16]	; (8008db4 <HAL_FLASH_Lock+0x1c>)
 8008da2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008da6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr
 8008db4:	40023c00 	.word	0x40023c00

08008db8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008dc4:	4b1a      	ldr	r3, [pc, #104]	; (8008e30 <FLASH_WaitForLastOperation+0x78>)
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8008dca:	f7ff fe37 	bl	8008a3c <HAL_GetTick>
 8008dce:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8008dd0:	e010      	b.n	8008df4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dd8:	d00c      	beq.n	8008df4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d007      	beq.n	8008df0 <FLASH_WaitForLastOperation+0x38>
 8008de0:	f7ff fe2c 	bl	8008a3c <HAL_GetTick>
 8008de4:	4602      	mov	r2, r0
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	1ad3      	subs	r3, r2, r3
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d201      	bcs.n	8008df4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e019      	b.n	8008e28 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8008df4:	4b0f      	ldr	r3, [pc, #60]	; (8008e34 <FLASH_WaitForLastOperation+0x7c>)
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1e8      	bne.n	8008dd2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8008e00:	4b0c      	ldr	r3, [pc, #48]	; (8008e34 <FLASH_WaitForLastOperation+0x7c>)
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	f003 0301 	and.w	r3, r3, #1
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d002      	beq.n	8008e12 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008e0c:	4b09      	ldr	r3, [pc, #36]	; (8008e34 <FLASH_WaitForLastOperation+0x7c>)
 8008e0e:	2201      	movs	r2, #1
 8008e10:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8008e12:	4b08      	ldr	r3, [pc, #32]	; (8008e34 <FLASH_WaitForLastOperation+0x7c>)
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d003      	beq.n	8008e26 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8008e1e:	f000 f8a5 	bl	8008f6c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	e000      	b.n	8008e28 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8008e26:	2300      	movs	r3, #0
  
}  
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3710      	adds	r7, #16
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	20000488 	.word	0x20000488
 8008e34:	40023c00 	.word	0x40023c00

08008e38 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008e44:	4b14      	ldr	r3, [pc, #80]	; (8008e98 <FLASH_Program_DoubleWord+0x60>)
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	4a13      	ldr	r2, [pc, #76]	; (8008e98 <FLASH_Program_DoubleWord+0x60>)
 8008e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8008e50:	4b11      	ldr	r3, [pc, #68]	; (8008e98 <FLASH_Program_DoubleWord+0x60>)
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	4a10      	ldr	r2, [pc, #64]	; (8008e98 <FLASH_Program_DoubleWord+0x60>)
 8008e56:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008e5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008e5c:	4b0e      	ldr	r3, [pc, #56]	; (8008e98 <FLASH_Program_DoubleWord+0x60>)
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	4a0d      	ldr	r2, [pc, #52]	; (8008e98 <FLASH_Program_DoubleWord+0x60>)
 8008e62:	f043 0301 	orr.w	r3, r3, #1
 8008e66:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	683a      	ldr	r2, [r7, #0]
 8008e6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8008e6e:	f3bf 8f6f 	isb	sy
}
 8008e72:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8008e74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008e78:	f04f 0200 	mov.w	r2, #0
 8008e7c:	f04f 0300 	mov.w	r3, #0
 8008e80:	000a      	movs	r2, r1
 8008e82:	2300      	movs	r3, #0
 8008e84:	68f9      	ldr	r1, [r7, #12]
 8008e86:	3104      	adds	r1, #4
 8008e88:	4613      	mov	r3, r2
 8008e8a:	600b      	str	r3, [r1, #0]
}
 8008e8c:	bf00      	nop
 8008e8e:	3714      	adds	r7, #20
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr
 8008e98:	40023c00 	.word	0x40023c00

08008e9c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008ea6:	4b0d      	ldr	r3, [pc, #52]	; (8008edc <FLASH_Program_Word+0x40>)
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	4a0c      	ldr	r2, [pc, #48]	; (8008edc <FLASH_Program_Word+0x40>)
 8008eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eb0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8008eb2:	4b0a      	ldr	r3, [pc, #40]	; (8008edc <FLASH_Program_Word+0x40>)
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	4a09      	ldr	r2, [pc, #36]	; (8008edc <FLASH_Program_Word+0x40>)
 8008eb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008ebc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008ebe:	4b07      	ldr	r3, [pc, #28]	; (8008edc <FLASH_Program_Word+0x40>)
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	4a06      	ldr	r2, [pc, #24]	; (8008edc <FLASH_Program_Word+0x40>)
 8008ec4:	f043 0301 	orr.w	r3, r3, #1
 8008ec8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	601a      	str	r2, [r3, #0]
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr
 8008edc:	40023c00 	.word	0x40023c00

08008ee0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008eec:	4b0d      	ldr	r3, [pc, #52]	; (8008f24 <FLASH_Program_HalfWord+0x44>)
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	4a0c      	ldr	r2, [pc, #48]	; (8008f24 <FLASH_Program_HalfWord+0x44>)
 8008ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ef6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8008ef8:	4b0a      	ldr	r3, [pc, #40]	; (8008f24 <FLASH_Program_HalfWord+0x44>)
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	4a09      	ldr	r2, [pc, #36]	; (8008f24 <FLASH_Program_HalfWord+0x44>)
 8008efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008f04:	4b07      	ldr	r3, [pc, #28]	; (8008f24 <FLASH_Program_HalfWord+0x44>)
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	4a06      	ldr	r2, [pc, #24]	; (8008f24 <FLASH_Program_HalfWord+0x44>)
 8008f0a:	f043 0301 	orr.w	r3, r3, #1
 8008f0e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	887a      	ldrh	r2, [r7, #2]
 8008f14:	801a      	strh	r2, [r3, #0]
}
 8008f16:	bf00      	nop
 8008f18:	370c      	adds	r7, #12
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	40023c00 	.word	0x40023c00

08008f28 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	460b      	mov	r3, r1
 8008f32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008f34:	4b0c      	ldr	r3, [pc, #48]	; (8008f68 <FLASH_Program_Byte+0x40>)
 8008f36:	691b      	ldr	r3, [r3, #16]
 8008f38:	4a0b      	ldr	r2, [pc, #44]	; (8008f68 <FLASH_Program_Byte+0x40>)
 8008f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8008f40:	4b09      	ldr	r3, [pc, #36]	; (8008f68 <FLASH_Program_Byte+0x40>)
 8008f42:	4a09      	ldr	r2, [pc, #36]	; (8008f68 <FLASH_Program_Byte+0x40>)
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008f48:	4b07      	ldr	r3, [pc, #28]	; (8008f68 <FLASH_Program_Byte+0x40>)
 8008f4a:	691b      	ldr	r3, [r3, #16]
 8008f4c:	4a06      	ldr	r2, [pc, #24]	; (8008f68 <FLASH_Program_Byte+0x40>)
 8008f4e:	f043 0301 	orr.w	r3, r3, #1
 8008f52:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	78fa      	ldrb	r2, [r7, #3]
 8008f58:	701a      	strb	r2, [r3, #0]
}
 8008f5a:	bf00      	nop
 8008f5c:	370c      	adds	r7, #12
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	40023c00 	.word	0x40023c00

08008f6c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8008f6c:	b480      	push	{r7}
 8008f6e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8008f70:	4b27      	ldr	r3, [pc, #156]	; (8009010 <FLASH_SetErrorCode+0xa4>)
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	f003 0310 	and.w	r3, r3, #16
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d008      	beq.n	8008f8e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8008f7c:	4b25      	ldr	r3, [pc, #148]	; (8009014 <FLASH_SetErrorCode+0xa8>)
 8008f7e:	69db      	ldr	r3, [r3, #28]
 8008f80:	f043 0310 	orr.w	r3, r3, #16
 8008f84:	4a23      	ldr	r2, [pc, #140]	; (8009014 <FLASH_SetErrorCode+0xa8>)
 8008f86:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8008f88:	4b21      	ldr	r3, [pc, #132]	; (8009010 <FLASH_SetErrorCode+0xa4>)
 8008f8a:	2210      	movs	r2, #16
 8008f8c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8008f8e:	4b20      	ldr	r3, [pc, #128]	; (8009010 <FLASH_SetErrorCode+0xa4>)
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	f003 0320 	and.w	r3, r3, #32
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d008      	beq.n	8008fac <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8008f9a:	4b1e      	ldr	r3, [pc, #120]	; (8009014 <FLASH_SetErrorCode+0xa8>)
 8008f9c:	69db      	ldr	r3, [r3, #28]
 8008f9e:	f043 0308 	orr.w	r3, r3, #8
 8008fa2:	4a1c      	ldr	r2, [pc, #112]	; (8009014 <FLASH_SetErrorCode+0xa8>)
 8008fa4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8008fa6:	4b1a      	ldr	r3, [pc, #104]	; (8009010 <FLASH_SetErrorCode+0xa4>)
 8008fa8:	2220      	movs	r2, #32
 8008faa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8008fac:	4b18      	ldr	r3, [pc, #96]	; (8009010 <FLASH_SetErrorCode+0xa4>)
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d008      	beq.n	8008fca <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8008fb8:	4b16      	ldr	r3, [pc, #88]	; (8009014 <FLASH_SetErrorCode+0xa8>)
 8008fba:	69db      	ldr	r3, [r3, #28]
 8008fbc:	f043 0304 	orr.w	r3, r3, #4
 8008fc0:	4a14      	ldr	r2, [pc, #80]	; (8009014 <FLASH_SetErrorCode+0xa8>)
 8008fc2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8008fc4:	4b12      	ldr	r3, [pc, #72]	; (8009010 <FLASH_SetErrorCode+0xa4>)
 8008fc6:	2240      	movs	r2, #64	; 0x40
 8008fc8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8008fca:	4b11      	ldr	r3, [pc, #68]	; (8009010 <FLASH_SetErrorCode+0xa4>)
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d008      	beq.n	8008fe8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8008fd6:	4b0f      	ldr	r3, [pc, #60]	; (8009014 <FLASH_SetErrorCode+0xa8>)
 8008fd8:	69db      	ldr	r3, [r3, #28]
 8008fda:	f043 0302 	orr.w	r3, r3, #2
 8008fde:	4a0d      	ldr	r2, [pc, #52]	; (8009014 <FLASH_SetErrorCode+0xa8>)
 8008fe0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8008fe2:	4b0b      	ldr	r3, [pc, #44]	; (8009010 <FLASH_SetErrorCode+0xa4>)
 8008fe4:	2280      	movs	r2, #128	; 0x80
 8008fe6:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8008fe8:	4b09      	ldr	r3, [pc, #36]	; (8009010 <FLASH_SetErrorCode+0xa4>)
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	f003 0302 	and.w	r3, r3, #2
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d008      	beq.n	8009006 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8008ff4:	4b07      	ldr	r3, [pc, #28]	; (8009014 <FLASH_SetErrorCode+0xa8>)
 8008ff6:	69db      	ldr	r3, [r3, #28]
 8008ff8:	f043 0320 	orr.w	r3, r3, #32
 8008ffc:	4a05      	ldr	r2, [pc, #20]	; (8009014 <FLASH_SetErrorCode+0xa8>)
 8008ffe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8009000:	4b03      	ldr	r3, [pc, #12]	; (8009010 <FLASH_SetErrorCode+0xa4>)
 8009002:	2202      	movs	r2, #2
 8009004:	60da      	str	r2, [r3, #12]
  }
}
 8009006:	bf00      	nop
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr
 8009010:	40023c00 	.word	0x40023c00
 8009014:	20000488 	.word	0x20000488

08009018 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8009026:	2300      	movs	r3, #0
 8009028:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800902a:	4b31      	ldr	r3, [pc, #196]	; (80090f0 <HAL_FLASHEx_Erase+0xd8>)
 800902c:	7e1b      	ldrb	r3, [r3, #24]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d101      	bne.n	8009036 <HAL_FLASHEx_Erase+0x1e>
 8009032:	2302      	movs	r3, #2
 8009034:	e058      	b.n	80090e8 <HAL_FLASHEx_Erase+0xd0>
 8009036:	4b2e      	ldr	r3, [pc, #184]	; (80090f0 <HAL_FLASHEx_Erase+0xd8>)
 8009038:	2201      	movs	r2, #1
 800903a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800903c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009040:	f7ff feba 	bl	8008db8 <FLASH_WaitForLastOperation>
 8009044:	4603      	mov	r3, r0
 8009046:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009048:	7bfb      	ldrb	r3, [r7, #15]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d148      	bne.n	80090e0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009054:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2b01      	cmp	r3, #1
 800905c:	d115      	bne.n	800908a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	b2da      	uxtb	r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	4619      	mov	r1, r3
 800906a:	4610      	mov	r0, r2
 800906c:	f000 f844 	bl	80090f8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009070:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009074:	f7ff fea0 	bl	8008db8 <FLASH_WaitForLastOperation>
 8009078:	4603      	mov	r3, r0
 800907a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800907c:	4b1d      	ldr	r3, [pc, #116]	; (80090f4 <HAL_FLASHEx_Erase+0xdc>)
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	4a1c      	ldr	r2, [pc, #112]	; (80090f4 <HAL_FLASHEx_Erase+0xdc>)
 8009082:	f023 0304 	bic.w	r3, r3, #4
 8009086:	6113      	str	r3, [r2, #16]
 8009088:	e028      	b.n	80090dc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	60bb      	str	r3, [r7, #8]
 8009090:	e01c      	b.n	80090cc <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	b2db      	uxtb	r3, r3
 8009098:	4619      	mov	r1, r3
 800909a:	68b8      	ldr	r0, [r7, #8]
 800909c:	f000 f850 	bl	8009140 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80090a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80090a4:	f7ff fe88 	bl	8008db8 <FLASH_WaitForLastOperation>
 80090a8:	4603      	mov	r3, r0
 80090aa:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80090ac:	4b11      	ldr	r3, [pc, #68]	; (80090f4 <HAL_FLASHEx_Erase+0xdc>)
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	4a10      	ldr	r2, [pc, #64]	; (80090f4 <HAL_FLASHEx_Erase+0xdc>)
 80090b2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80090b6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80090b8:	7bfb      	ldrb	r3, [r7, #15]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d003      	beq.n	80090c6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	68ba      	ldr	r2, [r7, #8]
 80090c2:	601a      	str	r2, [r3, #0]
          break;
 80090c4:	e00a      	b.n	80090dc <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	3301      	adds	r3, #1
 80090ca:	60bb      	str	r3, [r7, #8]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	68da      	ldr	r2, [r3, #12]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	4413      	add	r3, r2
 80090d6:	68ba      	ldr	r2, [r7, #8]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d3da      	bcc.n	8009092 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80090dc:	f000 f878 	bl	80091d0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80090e0:	4b03      	ldr	r3, [pc, #12]	; (80090f0 <HAL_FLASHEx_Erase+0xd8>)
 80090e2:	2200      	movs	r2, #0
 80090e4:	761a      	strb	r2, [r3, #24]

  return status;
 80090e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3710      	adds	r7, #16
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	20000488 	.word	0x20000488
 80090f4:	40023c00 	.word	0x40023c00

080090f8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	4603      	mov	r3, r0
 8009100:	6039      	str	r1, [r7, #0]
 8009102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009104:	4b0d      	ldr	r3, [pc, #52]	; (800913c <FLASH_MassErase+0x44>)
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	4a0c      	ldr	r2, [pc, #48]	; (800913c <FLASH_MassErase+0x44>)
 800910a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800910e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8009110:	4b0a      	ldr	r3, [pc, #40]	; (800913c <FLASH_MassErase+0x44>)
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	4a09      	ldr	r2, [pc, #36]	; (800913c <FLASH_MassErase+0x44>)
 8009116:	f043 0304 	orr.w	r3, r3, #4
 800911a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800911c:	4b07      	ldr	r3, [pc, #28]	; (800913c <FLASH_MassErase+0x44>)
 800911e:	691a      	ldr	r2, [r3, #16]
 8009120:	79fb      	ldrb	r3, [r7, #7]
 8009122:	021b      	lsls	r3, r3, #8
 8009124:	4313      	orrs	r3, r2
 8009126:	4a05      	ldr	r2, [pc, #20]	; (800913c <FLASH_MassErase+0x44>)
 8009128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800912c:	6113      	str	r3, [r2, #16]
}
 800912e:	bf00      	nop
 8009130:	370c      	adds	r7, #12
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	40023c00 	.word	0x40023c00

08009140 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	460b      	mov	r3, r1
 800914a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800914c:	2300      	movs	r3, #0
 800914e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8009150:	78fb      	ldrb	r3, [r7, #3]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d102      	bne.n	800915c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8009156:	2300      	movs	r3, #0
 8009158:	60fb      	str	r3, [r7, #12]
 800915a:	e010      	b.n	800917e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800915c:	78fb      	ldrb	r3, [r7, #3]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d103      	bne.n	800916a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8009162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009166:	60fb      	str	r3, [r7, #12]
 8009168:	e009      	b.n	800917e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800916a:	78fb      	ldrb	r3, [r7, #3]
 800916c:	2b02      	cmp	r3, #2
 800916e:	d103      	bne.n	8009178 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8009170:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009174:	60fb      	str	r3, [r7, #12]
 8009176:	e002      	b.n	800917e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8009178:	f44f 7340 	mov.w	r3, #768	; 0x300
 800917c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800917e:	4b13      	ldr	r3, [pc, #76]	; (80091cc <FLASH_Erase_Sector+0x8c>)
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	4a12      	ldr	r2, [pc, #72]	; (80091cc <FLASH_Erase_Sector+0x8c>)
 8009184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009188:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800918a:	4b10      	ldr	r3, [pc, #64]	; (80091cc <FLASH_Erase_Sector+0x8c>)
 800918c:	691a      	ldr	r2, [r3, #16]
 800918e:	490f      	ldr	r1, [pc, #60]	; (80091cc <FLASH_Erase_Sector+0x8c>)
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	4313      	orrs	r3, r2
 8009194:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8009196:	4b0d      	ldr	r3, [pc, #52]	; (80091cc <FLASH_Erase_Sector+0x8c>)
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	4a0c      	ldr	r2, [pc, #48]	; (80091cc <FLASH_Erase_Sector+0x8c>)
 800919c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80091a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80091a2:	4b0a      	ldr	r3, [pc, #40]	; (80091cc <FLASH_Erase_Sector+0x8c>)
 80091a4:	691a      	ldr	r2, [r3, #16]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	00db      	lsls	r3, r3, #3
 80091aa:	4313      	orrs	r3, r2
 80091ac:	4a07      	ldr	r2, [pc, #28]	; (80091cc <FLASH_Erase_Sector+0x8c>)
 80091ae:	f043 0302 	orr.w	r3, r3, #2
 80091b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80091b4:	4b05      	ldr	r3, [pc, #20]	; (80091cc <FLASH_Erase_Sector+0x8c>)
 80091b6:	691b      	ldr	r3, [r3, #16]
 80091b8:	4a04      	ldr	r2, [pc, #16]	; (80091cc <FLASH_Erase_Sector+0x8c>)
 80091ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091be:	6113      	str	r3, [r2, #16]
}
 80091c0:	bf00      	nop
 80091c2:	3714      	adds	r7, #20
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr
 80091cc:	40023c00 	.word	0x40023c00

080091d0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80091d0:	b480      	push	{r7}
 80091d2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80091d4:	4b20      	ldr	r3, [pc, #128]	; (8009258 <FLASH_FlushCaches+0x88>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d017      	beq.n	8009210 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80091e0:	4b1d      	ldr	r3, [pc, #116]	; (8009258 <FLASH_FlushCaches+0x88>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a1c      	ldr	r2, [pc, #112]	; (8009258 <FLASH_FlushCaches+0x88>)
 80091e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091ea:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80091ec:	4b1a      	ldr	r3, [pc, #104]	; (8009258 <FLASH_FlushCaches+0x88>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a19      	ldr	r2, [pc, #100]	; (8009258 <FLASH_FlushCaches+0x88>)
 80091f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80091f6:	6013      	str	r3, [r2, #0]
 80091f8:	4b17      	ldr	r3, [pc, #92]	; (8009258 <FLASH_FlushCaches+0x88>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a16      	ldr	r2, [pc, #88]	; (8009258 <FLASH_FlushCaches+0x88>)
 80091fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009202:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009204:	4b14      	ldr	r3, [pc, #80]	; (8009258 <FLASH_FlushCaches+0x88>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a13      	ldr	r2, [pc, #76]	; (8009258 <FLASH_FlushCaches+0x88>)
 800920a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800920e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8009210:	4b11      	ldr	r3, [pc, #68]	; (8009258 <FLASH_FlushCaches+0x88>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009218:	2b00      	cmp	r3, #0
 800921a:	d017      	beq.n	800924c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800921c:	4b0e      	ldr	r3, [pc, #56]	; (8009258 <FLASH_FlushCaches+0x88>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a0d      	ldr	r2, [pc, #52]	; (8009258 <FLASH_FlushCaches+0x88>)
 8009222:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009226:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009228:	4b0b      	ldr	r3, [pc, #44]	; (8009258 <FLASH_FlushCaches+0x88>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a0a      	ldr	r2, [pc, #40]	; (8009258 <FLASH_FlushCaches+0x88>)
 800922e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009232:	6013      	str	r3, [r2, #0]
 8009234:	4b08      	ldr	r3, [pc, #32]	; (8009258 <FLASH_FlushCaches+0x88>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a07      	ldr	r2, [pc, #28]	; (8009258 <FLASH_FlushCaches+0x88>)
 800923a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800923e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8009240:	4b05      	ldr	r3, [pc, #20]	; (8009258 <FLASH_FlushCaches+0x88>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a04      	ldr	r2, [pc, #16]	; (8009258 <FLASH_FlushCaches+0x88>)
 8009246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800924a:	6013      	str	r3, [r2, #0]
  }
}
 800924c:	bf00      	nop
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr
 8009256:	bf00      	nop
 8009258:	40023c00 	.word	0x40023c00

0800925c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800925c:	b480      	push	{r7}
 800925e:	b089      	sub	sp, #36	; 0x24
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009266:	2300      	movs	r3, #0
 8009268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800926a:	2300      	movs	r3, #0
 800926c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800926e:	2300      	movs	r3, #0
 8009270:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009272:	2300      	movs	r3, #0
 8009274:	61fb      	str	r3, [r7, #28]
 8009276:	e16b      	b.n	8009550 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009278:	2201      	movs	r2, #1
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	fa02 f303 	lsl.w	r3, r2, r3
 8009280:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	697a      	ldr	r2, [r7, #20]
 8009288:	4013      	ands	r3, r2
 800928a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800928c:	693a      	ldr	r2, [r7, #16]
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	429a      	cmp	r2, r3
 8009292:	f040 815a 	bne.w	800954a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	f003 0303 	and.w	r3, r3, #3
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d005      	beq.n	80092ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d130      	bne.n	8009310 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80092b4:	69fb      	ldr	r3, [r7, #28]
 80092b6:	005b      	lsls	r3, r3, #1
 80092b8:	2203      	movs	r2, #3
 80092ba:	fa02 f303 	lsl.w	r3, r2, r3
 80092be:	43db      	mvns	r3, r3
 80092c0:	69ba      	ldr	r2, [r7, #24]
 80092c2:	4013      	ands	r3, r2
 80092c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	68da      	ldr	r2, [r3, #12]
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	005b      	lsls	r3, r3, #1
 80092ce:	fa02 f303 	lsl.w	r3, r2, r3
 80092d2:	69ba      	ldr	r2, [r7, #24]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	69ba      	ldr	r2, [r7, #24]
 80092dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80092e4:	2201      	movs	r2, #1
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	fa02 f303 	lsl.w	r3, r2, r3
 80092ec:	43db      	mvns	r3, r3
 80092ee:	69ba      	ldr	r2, [r7, #24]
 80092f0:	4013      	ands	r3, r2
 80092f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	091b      	lsrs	r3, r3, #4
 80092fa:	f003 0201 	and.w	r2, r3, #1
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	fa02 f303 	lsl.w	r3, r2, r3
 8009304:	69ba      	ldr	r2, [r7, #24]
 8009306:	4313      	orrs	r3, r2
 8009308:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	69ba      	ldr	r2, [r7, #24]
 800930e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	f003 0303 	and.w	r3, r3, #3
 8009318:	2b03      	cmp	r3, #3
 800931a:	d017      	beq.n	800934c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	005b      	lsls	r3, r3, #1
 8009326:	2203      	movs	r2, #3
 8009328:	fa02 f303 	lsl.w	r3, r2, r3
 800932c:	43db      	mvns	r3, r3
 800932e:	69ba      	ldr	r2, [r7, #24]
 8009330:	4013      	ands	r3, r2
 8009332:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	689a      	ldr	r2, [r3, #8]
 8009338:	69fb      	ldr	r3, [r7, #28]
 800933a:	005b      	lsls	r3, r3, #1
 800933c:	fa02 f303 	lsl.w	r3, r2, r3
 8009340:	69ba      	ldr	r2, [r7, #24]
 8009342:	4313      	orrs	r3, r2
 8009344:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	69ba      	ldr	r2, [r7, #24]
 800934a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	f003 0303 	and.w	r3, r3, #3
 8009354:	2b02      	cmp	r3, #2
 8009356:	d123      	bne.n	80093a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	08da      	lsrs	r2, r3, #3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	3208      	adds	r2, #8
 8009360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009364:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	f003 0307 	and.w	r3, r3, #7
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	220f      	movs	r2, #15
 8009370:	fa02 f303 	lsl.w	r3, r2, r3
 8009374:	43db      	mvns	r3, r3
 8009376:	69ba      	ldr	r2, [r7, #24]
 8009378:	4013      	ands	r3, r2
 800937a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	691a      	ldr	r2, [r3, #16]
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	f003 0307 	and.w	r3, r3, #7
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	fa02 f303 	lsl.w	r3, r2, r3
 800938c:	69ba      	ldr	r2, [r7, #24]
 800938e:	4313      	orrs	r3, r2
 8009390:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	08da      	lsrs	r2, r3, #3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	3208      	adds	r2, #8
 800939a:	69b9      	ldr	r1, [r7, #24]
 800939c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	005b      	lsls	r3, r3, #1
 80093aa:	2203      	movs	r2, #3
 80093ac:	fa02 f303 	lsl.w	r3, r2, r3
 80093b0:	43db      	mvns	r3, r3
 80093b2:	69ba      	ldr	r2, [r7, #24]
 80093b4:	4013      	ands	r3, r2
 80093b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	f003 0203 	and.w	r2, r3, #3
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	005b      	lsls	r3, r3, #1
 80093c4:	fa02 f303 	lsl.w	r3, r2, r3
 80093c8:	69ba      	ldr	r2, [r7, #24]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	69ba      	ldr	r2, [r7, #24]
 80093d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f000 80b4 	beq.w	800954a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80093e2:	2300      	movs	r3, #0
 80093e4:	60fb      	str	r3, [r7, #12]
 80093e6:	4b60      	ldr	r3, [pc, #384]	; (8009568 <HAL_GPIO_Init+0x30c>)
 80093e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ea:	4a5f      	ldr	r2, [pc, #380]	; (8009568 <HAL_GPIO_Init+0x30c>)
 80093ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80093f0:	6453      	str	r3, [r2, #68]	; 0x44
 80093f2:	4b5d      	ldr	r3, [pc, #372]	; (8009568 <HAL_GPIO_Init+0x30c>)
 80093f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093fa:	60fb      	str	r3, [r7, #12]
 80093fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80093fe:	4a5b      	ldr	r2, [pc, #364]	; (800956c <HAL_GPIO_Init+0x310>)
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	089b      	lsrs	r3, r3, #2
 8009404:	3302      	adds	r3, #2
 8009406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800940a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	f003 0303 	and.w	r3, r3, #3
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	220f      	movs	r2, #15
 8009416:	fa02 f303 	lsl.w	r3, r2, r3
 800941a:	43db      	mvns	r3, r3
 800941c:	69ba      	ldr	r2, [r7, #24]
 800941e:	4013      	ands	r3, r2
 8009420:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a52      	ldr	r2, [pc, #328]	; (8009570 <HAL_GPIO_Init+0x314>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d02b      	beq.n	8009482 <HAL_GPIO_Init+0x226>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	4a51      	ldr	r2, [pc, #324]	; (8009574 <HAL_GPIO_Init+0x318>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d025      	beq.n	800947e <HAL_GPIO_Init+0x222>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a50      	ldr	r2, [pc, #320]	; (8009578 <HAL_GPIO_Init+0x31c>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d01f      	beq.n	800947a <HAL_GPIO_Init+0x21e>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a4f      	ldr	r2, [pc, #316]	; (800957c <HAL_GPIO_Init+0x320>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d019      	beq.n	8009476 <HAL_GPIO_Init+0x21a>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a4e      	ldr	r2, [pc, #312]	; (8009580 <HAL_GPIO_Init+0x324>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d013      	beq.n	8009472 <HAL_GPIO_Init+0x216>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a4d      	ldr	r2, [pc, #308]	; (8009584 <HAL_GPIO_Init+0x328>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d00d      	beq.n	800946e <HAL_GPIO_Init+0x212>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a4c      	ldr	r2, [pc, #304]	; (8009588 <HAL_GPIO_Init+0x32c>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d007      	beq.n	800946a <HAL_GPIO_Init+0x20e>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a4b      	ldr	r2, [pc, #300]	; (800958c <HAL_GPIO_Init+0x330>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d101      	bne.n	8009466 <HAL_GPIO_Init+0x20a>
 8009462:	2307      	movs	r3, #7
 8009464:	e00e      	b.n	8009484 <HAL_GPIO_Init+0x228>
 8009466:	2308      	movs	r3, #8
 8009468:	e00c      	b.n	8009484 <HAL_GPIO_Init+0x228>
 800946a:	2306      	movs	r3, #6
 800946c:	e00a      	b.n	8009484 <HAL_GPIO_Init+0x228>
 800946e:	2305      	movs	r3, #5
 8009470:	e008      	b.n	8009484 <HAL_GPIO_Init+0x228>
 8009472:	2304      	movs	r3, #4
 8009474:	e006      	b.n	8009484 <HAL_GPIO_Init+0x228>
 8009476:	2303      	movs	r3, #3
 8009478:	e004      	b.n	8009484 <HAL_GPIO_Init+0x228>
 800947a:	2302      	movs	r3, #2
 800947c:	e002      	b.n	8009484 <HAL_GPIO_Init+0x228>
 800947e:	2301      	movs	r3, #1
 8009480:	e000      	b.n	8009484 <HAL_GPIO_Init+0x228>
 8009482:	2300      	movs	r3, #0
 8009484:	69fa      	ldr	r2, [r7, #28]
 8009486:	f002 0203 	and.w	r2, r2, #3
 800948a:	0092      	lsls	r2, r2, #2
 800948c:	4093      	lsls	r3, r2
 800948e:	69ba      	ldr	r2, [r7, #24]
 8009490:	4313      	orrs	r3, r2
 8009492:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009494:	4935      	ldr	r1, [pc, #212]	; (800956c <HAL_GPIO_Init+0x310>)
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	089b      	lsrs	r3, r3, #2
 800949a:	3302      	adds	r3, #2
 800949c:	69ba      	ldr	r2, [r7, #24]
 800949e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80094a2:	4b3b      	ldr	r3, [pc, #236]	; (8009590 <HAL_GPIO_Init+0x334>)
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	43db      	mvns	r3, r3
 80094ac:	69ba      	ldr	r2, [r7, #24]
 80094ae:	4013      	ands	r3, r2
 80094b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d003      	beq.n	80094c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80094be:	69ba      	ldr	r2, [r7, #24]
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80094c6:	4a32      	ldr	r2, [pc, #200]	; (8009590 <HAL_GPIO_Init+0x334>)
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80094cc:	4b30      	ldr	r3, [pc, #192]	; (8009590 <HAL_GPIO_Init+0x334>)
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	43db      	mvns	r3, r3
 80094d6:	69ba      	ldr	r2, [r7, #24]
 80094d8:	4013      	ands	r3, r2
 80094da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d003      	beq.n	80094f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80094e8:	69ba      	ldr	r2, [r7, #24]
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80094f0:	4a27      	ldr	r2, [pc, #156]	; (8009590 <HAL_GPIO_Init+0x334>)
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80094f6:	4b26      	ldr	r3, [pc, #152]	; (8009590 <HAL_GPIO_Init+0x334>)
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	43db      	mvns	r3, r3
 8009500:	69ba      	ldr	r2, [r7, #24]
 8009502:	4013      	ands	r3, r2
 8009504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800950e:	2b00      	cmp	r3, #0
 8009510:	d003      	beq.n	800951a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009512:	69ba      	ldr	r2, [r7, #24]
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	4313      	orrs	r3, r2
 8009518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800951a:	4a1d      	ldr	r2, [pc, #116]	; (8009590 <HAL_GPIO_Init+0x334>)
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009520:	4b1b      	ldr	r3, [pc, #108]	; (8009590 <HAL_GPIO_Init+0x334>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	43db      	mvns	r3, r3
 800952a:	69ba      	ldr	r2, [r7, #24]
 800952c:	4013      	ands	r3, r2
 800952e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	685b      	ldr	r3, [r3, #4]
 8009534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009538:	2b00      	cmp	r3, #0
 800953a:	d003      	beq.n	8009544 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800953c:	69ba      	ldr	r2, [r7, #24]
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	4313      	orrs	r3, r2
 8009542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009544:	4a12      	ldr	r2, [pc, #72]	; (8009590 <HAL_GPIO_Init+0x334>)
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	3301      	adds	r3, #1
 800954e:	61fb      	str	r3, [r7, #28]
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	2b0f      	cmp	r3, #15
 8009554:	f67f ae90 	bls.w	8009278 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009558:	bf00      	nop
 800955a:	bf00      	nop
 800955c:	3724      	adds	r7, #36	; 0x24
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	40023800 	.word	0x40023800
 800956c:	40013800 	.word	0x40013800
 8009570:	40020000 	.word	0x40020000
 8009574:	40020400 	.word	0x40020400
 8009578:	40020800 	.word	0x40020800
 800957c:	40020c00 	.word	0x40020c00
 8009580:	40021000 	.word	0x40021000
 8009584:	40021400 	.word	0x40021400
 8009588:	40021800 	.word	0x40021800
 800958c:	40021c00 	.word	0x40021c00
 8009590:	40013c00 	.word	0x40013c00

08009594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	460b      	mov	r3, r1
 800959e:	807b      	strh	r3, [r7, #2]
 80095a0:	4613      	mov	r3, r2
 80095a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80095a4:	787b      	ldrb	r3, [r7, #1]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d003      	beq.n	80095b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80095aa:	887a      	ldrh	r2, [r7, #2]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80095b0:	e003      	b.n	80095ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80095b2:	887b      	ldrh	r3, [r7, #2]
 80095b4:	041a      	lsls	r2, r3, #16
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	619a      	str	r2, [r3, #24]
}
 80095ba:	bf00      	nop
 80095bc:	370c      	adds	r7, #12
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
	...

080095c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b086      	sub	sp, #24
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d101      	bne.n	80095da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	e267      	b.n	8009aaa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f003 0301 	and.w	r3, r3, #1
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d075      	beq.n	80096d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80095e6:	4b88      	ldr	r3, [pc, #544]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	f003 030c 	and.w	r3, r3, #12
 80095ee:	2b04      	cmp	r3, #4
 80095f0:	d00c      	beq.n	800960c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80095f2:	4b85      	ldr	r3, [pc, #532]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80095fa:	2b08      	cmp	r3, #8
 80095fc:	d112      	bne.n	8009624 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80095fe:	4b82      	ldr	r3, [pc, #520]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009606:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800960a:	d10b      	bne.n	8009624 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800960c:	4b7e      	ldr	r3, [pc, #504]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d05b      	beq.n	80096d0 <HAL_RCC_OscConfig+0x108>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d157      	bne.n	80096d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009620:	2301      	movs	r3, #1
 8009622:	e242      	b.n	8009aaa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800962c:	d106      	bne.n	800963c <HAL_RCC_OscConfig+0x74>
 800962e:	4b76      	ldr	r3, [pc, #472]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a75      	ldr	r2, [pc, #468]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 8009634:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009638:	6013      	str	r3, [r2, #0]
 800963a:	e01d      	b.n	8009678 <HAL_RCC_OscConfig+0xb0>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009644:	d10c      	bne.n	8009660 <HAL_RCC_OscConfig+0x98>
 8009646:	4b70      	ldr	r3, [pc, #448]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a6f      	ldr	r2, [pc, #444]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 800964c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009650:	6013      	str	r3, [r2, #0]
 8009652:	4b6d      	ldr	r3, [pc, #436]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a6c      	ldr	r2, [pc, #432]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 8009658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800965c:	6013      	str	r3, [r2, #0]
 800965e:	e00b      	b.n	8009678 <HAL_RCC_OscConfig+0xb0>
 8009660:	4b69      	ldr	r3, [pc, #420]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a68      	ldr	r2, [pc, #416]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 8009666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800966a:	6013      	str	r3, [r2, #0]
 800966c:	4b66      	ldr	r3, [pc, #408]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a65      	ldr	r2, [pc, #404]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 8009672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009676:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d013      	beq.n	80096a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009680:	f7ff f9dc 	bl	8008a3c <HAL_GetTick>
 8009684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009686:	e008      	b.n	800969a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009688:	f7ff f9d8 	bl	8008a3c <HAL_GetTick>
 800968c:	4602      	mov	r2, r0
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	1ad3      	subs	r3, r2, r3
 8009692:	2b64      	cmp	r3, #100	; 0x64
 8009694:	d901      	bls.n	800969a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009696:	2303      	movs	r3, #3
 8009698:	e207      	b.n	8009aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800969a:	4b5b      	ldr	r3, [pc, #364]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d0f0      	beq.n	8009688 <HAL_RCC_OscConfig+0xc0>
 80096a6:	e014      	b.n	80096d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096a8:	f7ff f9c8 	bl	8008a3c <HAL_GetTick>
 80096ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80096ae:	e008      	b.n	80096c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80096b0:	f7ff f9c4 	bl	8008a3c <HAL_GetTick>
 80096b4:	4602      	mov	r2, r0
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	1ad3      	subs	r3, r2, r3
 80096ba:	2b64      	cmp	r3, #100	; 0x64
 80096bc:	d901      	bls.n	80096c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80096be:	2303      	movs	r3, #3
 80096c0:	e1f3      	b.n	8009aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80096c2:	4b51      	ldr	r3, [pc, #324]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d1f0      	bne.n	80096b0 <HAL_RCC_OscConfig+0xe8>
 80096ce:	e000      	b.n	80096d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80096d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f003 0302 	and.w	r3, r3, #2
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d063      	beq.n	80097a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80096de:	4b4a      	ldr	r3, [pc, #296]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f003 030c 	and.w	r3, r3, #12
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00b      	beq.n	8009702 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80096ea:	4b47      	ldr	r3, [pc, #284]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80096f2:	2b08      	cmp	r3, #8
 80096f4:	d11c      	bne.n	8009730 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80096f6:	4b44      	ldr	r3, [pc, #272]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d116      	bne.n	8009730 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009702:	4b41      	ldr	r3, [pc, #260]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f003 0302 	and.w	r3, r3, #2
 800970a:	2b00      	cmp	r3, #0
 800970c:	d005      	beq.n	800971a <HAL_RCC_OscConfig+0x152>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	2b01      	cmp	r3, #1
 8009714:	d001      	beq.n	800971a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e1c7      	b.n	8009aaa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800971a:	4b3b      	ldr	r3, [pc, #236]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	00db      	lsls	r3, r3, #3
 8009728:	4937      	ldr	r1, [pc, #220]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 800972a:	4313      	orrs	r3, r2
 800972c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800972e:	e03a      	b.n	80097a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d020      	beq.n	800977a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009738:	4b34      	ldr	r3, [pc, #208]	; (800980c <HAL_RCC_OscConfig+0x244>)
 800973a:	2201      	movs	r2, #1
 800973c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800973e:	f7ff f97d 	bl	8008a3c <HAL_GetTick>
 8009742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009744:	e008      	b.n	8009758 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009746:	f7ff f979 	bl	8008a3c <HAL_GetTick>
 800974a:	4602      	mov	r2, r0
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	2b02      	cmp	r3, #2
 8009752:	d901      	bls.n	8009758 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009754:	2303      	movs	r3, #3
 8009756:	e1a8      	b.n	8009aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009758:	4b2b      	ldr	r3, [pc, #172]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 0302 	and.w	r3, r3, #2
 8009760:	2b00      	cmp	r3, #0
 8009762:	d0f0      	beq.n	8009746 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009764:	4b28      	ldr	r3, [pc, #160]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	691b      	ldr	r3, [r3, #16]
 8009770:	00db      	lsls	r3, r3, #3
 8009772:	4925      	ldr	r1, [pc, #148]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 8009774:	4313      	orrs	r3, r2
 8009776:	600b      	str	r3, [r1, #0]
 8009778:	e015      	b.n	80097a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800977a:	4b24      	ldr	r3, [pc, #144]	; (800980c <HAL_RCC_OscConfig+0x244>)
 800977c:	2200      	movs	r2, #0
 800977e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009780:	f7ff f95c 	bl	8008a3c <HAL_GetTick>
 8009784:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009786:	e008      	b.n	800979a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009788:	f7ff f958 	bl	8008a3c <HAL_GetTick>
 800978c:	4602      	mov	r2, r0
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	2b02      	cmp	r3, #2
 8009794:	d901      	bls.n	800979a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009796:	2303      	movs	r3, #3
 8009798:	e187      	b.n	8009aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800979a:	4b1b      	ldr	r3, [pc, #108]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 0302 	and.w	r3, r3, #2
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1f0      	bne.n	8009788 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f003 0308 	and.w	r3, r3, #8
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d036      	beq.n	8009820 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	695b      	ldr	r3, [r3, #20]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d016      	beq.n	80097e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80097ba:	4b15      	ldr	r3, [pc, #84]	; (8009810 <HAL_RCC_OscConfig+0x248>)
 80097bc:	2201      	movs	r2, #1
 80097be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097c0:	f7ff f93c 	bl	8008a3c <HAL_GetTick>
 80097c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80097c6:	e008      	b.n	80097da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80097c8:	f7ff f938 	bl	8008a3c <HAL_GetTick>
 80097cc:	4602      	mov	r2, r0
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	d901      	bls.n	80097da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80097d6:	2303      	movs	r3, #3
 80097d8:	e167      	b.n	8009aaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80097da:	4b0b      	ldr	r3, [pc, #44]	; (8009808 <HAL_RCC_OscConfig+0x240>)
 80097dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097de:	f003 0302 	and.w	r3, r3, #2
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d0f0      	beq.n	80097c8 <HAL_RCC_OscConfig+0x200>
 80097e6:	e01b      	b.n	8009820 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80097e8:	4b09      	ldr	r3, [pc, #36]	; (8009810 <HAL_RCC_OscConfig+0x248>)
 80097ea:	2200      	movs	r2, #0
 80097ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80097ee:	f7ff f925 	bl	8008a3c <HAL_GetTick>
 80097f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80097f4:	e00e      	b.n	8009814 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80097f6:	f7ff f921 	bl	8008a3c <HAL_GetTick>
 80097fa:	4602      	mov	r2, r0
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	1ad3      	subs	r3, r2, r3
 8009800:	2b02      	cmp	r3, #2
 8009802:	d907      	bls.n	8009814 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009804:	2303      	movs	r3, #3
 8009806:	e150      	b.n	8009aaa <HAL_RCC_OscConfig+0x4e2>
 8009808:	40023800 	.word	0x40023800
 800980c:	42470000 	.word	0x42470000
 8009810:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009814:	4b88      	ldr	r3, [pc, #544]	; (8009a38 <HAL_RCC_OscConfig+0x470>)
 8009816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009818:	f003 0302 	and.w	r3, r3, #2
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1ea      	bne.n	80097f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f003 0304 	and.w	r3, r3, #4
 8009828:	2b00      	cmp	r3, #0
 800982a:	f000 8097 	beq.w	800995c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800982e:	2300      	movs	r3, #0
 8009830:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009832:	4b81      	ldr	r3, [pc, #516]	; (8009a38 <HAL_RCC_OscConfig+0x470>)
 8009834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800983a:	2b00      	cmp	r3, #0
 800983c:	d10f      	bne.n	800985e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800983e:	2300      	movs	r3, #0
 8009840:	60bb      	str	r3, [r7, #8]
 8009842:	4b7d      	ldr	r3, [pc, #500]	; (8009a38 <HAL_RCC_OscConfig+0x470>)
 8009844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009846:	4a7c      	ldr	r2, [pc, #496]	; (8009a38 <HAL_RCC_OscConfig+0x470>)
 8009848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800984c:	6413      	str	r3, [r2, #64]	; 0x40
 800984e:	4b7a      	ldr	r3, [pc, #488]	; (8009a38 <HAL_RCC_OscConfig+0x470>)
 8009850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009856:	60bb      	str	r3, [r7, #8]
 8009858:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800985a:	2301      	movs	r3, #1
 800985c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800985e:	4b77      	ldr	r3, [pc, #476]	; (8009a3c <HAL_RCC_OscConfig+0x474>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009866:	2b00      	cmp	r3, #0
 8009868:	d118      	bne.n	800989c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800986a:	4b74      	ldr	r3, [pc, #464]	; (8009a3c <HAL_RCC_OscConfig+0x474>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a73      	ldr	r2, [pc, #460]	; (8009a3c <HAL_RCC_OscConfig+0x474>)
 8009870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009874:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009876:	f7ff f8e1 	bl	8008a3c <HAL_GetTick>
 800987a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800987c:	e008      	b.n	8009890 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800987e:	f7ff f8dd 	bl	8008a3c <HAL_GetTick>
 8009882:	4602      	mov	r2, r0
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	1ad3      	subs	r3, r2, r3
 8009888:	2b02      	cmp	r3, #2
 800988a:	d901      	bls.n	8009890 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800988c:	2303      	movs	r3, #3
 800988e:	e10c      	b.n	8009aaa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009890:	4b6a      	ldr	r3, [pc, #424]	; (8009a3c <HAL_RCC_OscConfig+0x474>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009898:	2b00      	cmp	r3, #0
 800989a:	d0f0      	beq.n	800987e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	689b      	ldr	r3, [r3, #8]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d106      	bne.n	80098b2 <HAL_RCC_OscConfig+0x2ea>
 80098a4:	4b64      	ldr	r3, [pc, #400]	; (8009a38 <HAL_RCC_OscConfig+0x470>)
 80098a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098a8:	4a63      	ldr	r2, [pc, #396]	; (8009a38 <HAL_RCC_OscConfig+0x470>)
 80098aa:	f043 0301 	orr.w	r3, r3, #1
 80098ae:	6713      	str	r3, [r2, #112]	; 0x70
 80098b0:	e01c      	b.n	80098ec <HAL_RCC_OscConfig+0x324>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	2b05      	cmp	r3, #5
 80098b8:	d10c      	bne.n	80098d4 <HAL_RCC_OscConfig+0x30c>
 80098ba:	4b5f      	ldr	r3, [pc, #380]	; (8009a38 <HAL_RCC_OscConfig+0x470>)
 80098bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098be:	4a5e      	ldr	r2, [pc, #376]	; (8009a38 <HAL_RCC_OscConfig+0x470>)
 80098c0:	f043 0304 	orr.w	r3, r3, #4
 80098c4:	6713      	str	r3, [r2, #112]	; 0x70
 80098c6:	4b5c      	ldr	r3, [pc, #368]	; (8009a38 <HAL_RCC_OscConfig+0x470>)
 80098c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ca:	4a5b      	ldr	r2, [pc, #364]	; (8009a38 <HAL_RCC_OscConfig+0x470>)
 80098cc:	f043 0301 	orr.w	r3, r3, #1
 80098d0:	6713      	str	r3, [r2, #112]	; 0x70
 80098d2:	e00b      	b.n	80098ec <HAL_RCC_OscConfig+0x324>
 80098d4:	4b58      	ldr	r3, [pc, #352]	; (8009a38 <HAL_RCC_OscConfig+0x470>)
 80098d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d8:	4a57      	ldr	r2, [pc, #348]	; (8009a38 <HAL_RCC_OscConfig+0x470>)
 80098da:	f023 0301 	bic.w	r3, r3, #1
 80098de:	6713      	str	r3, [r2, #112]	; 0x70
 80098e0:	4b55      	ldr	r3, [pc, #340]	; (8009a38 <HAL_RCC_OscConfig+0x470>)
 80098e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098e4:	4a54      	ldr	r2, [pc, #336]	; (8009a38 <HAL_RCC_OscConfig+0x470>)
 80098e6:	f023 0304 	bic.w	r3, r3, #4
 80098ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d015      	beq.n	8009920 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80098f4:	f7ff f8a2 	bl	8008a3c <HAL_GetTick>
 80098f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80098fa:	e00a      	b.n	8009912 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80098fc:	f7ff f89e 	bl	8008a3c <HAL_GetTick>
 8009900:	4602      	mov	r2, r0
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	1ad3      	subs	r3, r2, r3
 8009906:	f241 3288 	movw	r2, #5000	; 0x1388
 800990a:	4293      	cmp	r3, r2
 800990c:	d901      	bls.n	8009912 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800990e:	2303      	movs	r3, #3
 8009910:	e0cb      	b.n	8009aaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009912:	4b49      	ldr	r3, [pc, #292]	; (8009a38 <HAL_RCC_OscConfig+0x470>)
 8009914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009916:	f003 0302 	and.w	r3, r3, #2
 800991a:	2b00      	cmp	r3, #0
 800991c:	d0ee      	beq.n	80098fc <HAL_RCC_OscConfig+0x334>
 800991e:	e014      	b.n	800994a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009920:	f7ff f88c 	bl	8008a3c <HAL_GetTick>
 8009924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009926:	e00a      	b.n	800993e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009928:	f7ff f888 	bl	8008a3c <HAL_GetTick>
 800992c:	4602      	mov	r2, r0
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	f241 3288 	movw	r2, #5000	; 0x1388
 8009936:	4293      	cmp	r3, r2
 8009938:	d901      	bls.n	800993e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800993a:	2303      	movs	r3, #3
 800993c:	e0b5      	b.n	8009aaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800993e:	4b3e      	ldr	r3, [pc, #248]	; (8009a38 <HAL_RCC_OscConfig+0x470>)
 8009940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009942:	f003 0302 	and.w	r3, r3, #2
 8009946:	2b00      	cmp	r3, #0
 8009948:	d1ee      	bne.n	8009928 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800994a:	7dfb      	ldrb	r3, [r7, #23]
 800994c:	2b01      	cmp	r3, #1
 800994e:	d105      	bne.n	800995c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009950:	4b39      	ldr	r3, [pc, #228]	; (8009a38 <HAL_RCC_OscConfig+0x470>)
 8009952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009954:	4a38      	ldr	r2, [pc, #224]	; (8009a38 <HAL_RCC_OscConfig+0x470>)
 8009956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800995a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	2b00      	cmp	r3, #0
 8009962:	f000 80a1 	beq.w	8009aa8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009966:	4b34      	ldr	r3, [pc, #208]	; (8009a38 <HAL_RCC_OscConfig+0x470>)
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	f003 030c 	and.w	r3, r3, #12
 800996e:	2b08      	cmp	r3, #8
 8009970:	d05c      	beq.n	8009a2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	699b      	ldr	r3, [r3, #24]
 8009976:	2b02      	cmp	r3, #2
 8009978:	d141      	bne.n	80099fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800997a:	4b31      	ldr	r3, [pc, #196]	; (8009a40 <HAL_RCC_OscConfig+0x478>)
 800997c:	2200      	movs	r2, #0
 800997e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009980:	f7ff f85c 	bl	8008a3c <HAL_GetTick>
 8009984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009986:	e008      	b.n	800999a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009988:	f7ff f858 	bl	8008a3c <HAL_GetTick>
 800998c:	4602      	mov	r2, r0
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	2b02      	cmp	r3, #2
 8009994:	d901      	bls.n	800999a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009996:	2303      	movs	r3, #3
 8009998:	e087      	b.n	8009aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800999a:	4b27      	ldr	r3, [pc, #156]	; (8009a38 <HAL_RCC_OscConfig+0x470>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d1f0      	bne.n	8009988 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	69da      	ldr	r2, [r3, #28]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6a1b      	ldr	r3, [r3, #32]
 80099ae:	431a      	orrs	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b4:	019b      	lsls	r3, r3, #6
 80099b6:	431a      	orrs	r2, r3
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099bc:	085b      	lsrs	r3, r3, #1
 80099be:	3b01      	subs	r3, #1
 80099c0:	041b      	lsls	r3, r3, #16
 80099c2:	431a      	orrs	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c8:	061b      	lsls	r3, r3, #24
 80099ca:	491b      	ldr	r1, [pc, #108]	; (8009a38 <HAL_RCC_OscConfig+0x470>)
 80099cc:	4313      	orrs	r3, r2
 80099ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80099d0:	4b1b      	ldr	r3, [pc, #108]	; (8009a40 <HAL_RCC_OscConfig+0x478>)
 80099d2:	2201      	movs	r2, #1
 80099d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099d6:	f7ff f831 	bl	8008a3c <HAL_GetTick>
 80099da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80099dc:	e008      	b.n	80099f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80099de:	f7ff f82d 	bl	8008a3c <HAL_GetTick>
 80099e2:	4602      	mov	r2, r0
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	1ad3      	subs	r3, r2, r3
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	d901      	bls.n	80099f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80099ec:	2303      	movs	r3, #3
 80099ee:	e05c      	b.n	8009aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80099f0:	4b11      	ldr	r3, [pc, #68]	; (8009a38 <HAL_RCC_OscConfig+0x470>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d0f0      	beq.n	80099de <HAL_RCC_OscConfig+0x416>
 80099fc:	e054      	b.n	8009aa8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80099fe:	4b10      	ldr	r3, [pc, #64]	; (8009a40 <HAL_RCC_OscConfig+0x478>)
 8009a00:	2200      	movs	r2, #0
 8009a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a04:	f7ff f81a 	bl	8008a3c <HAL_GetTick>
 8009a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a0a:	e008      	b.n	8009a1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009a0c:	f7ff f816 	bl	8008a3c <HAL_GetTick>
 8009a10:	4602      	mov	r2, r0
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d901      	bls.n	8009a1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009a1a:	2303      	movs	r3, #3
 8009a1c:	e045      	b.n	8009aaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009a1e:	4b06      	ldr	r3, [pc, #24]	; (8009a38 <HAL_RCC_OscConfig+0x470>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1f0      	bne.n	8009a0c <HAL_RCC_OscConfig+0x444>
 8009a2a:	e03d      	b.n	8009aa8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	699b      	ldr	r3, [r3, #24]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d107      	bne.n	8009a44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	e038      	b.n	8009aaa <HAL_RCC_OscConfig+0x4e2>
 8009a38:	40023800 	.word	0x40023800
 8009a3c:	40007000 	.word	0x40007000
 8009a40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009a44:	4b1b      	ldr	r3, [pc, #108]	; (8009ab4 <HAL_RCC_OscConfig+0x4ec>)
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	699b      	ldr	r3, [r3, #24]
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d028      	beq.n	8009aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d121      	bne.n	8009aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d11a      	bne.n	8009aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009a74:	4013      	ands	r3, r2
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009a7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d111      	bne.n	8009aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a8a:	085b      	lsrs	r3, r3, #1
 8009a8c:	3b01      	subs	r3, #1
 8009a8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d107      	bne.n	8009aa4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d001      	beq.n	8009aa8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e000      	b.n	8009aaa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009aa8:	2300      	movs	r3, #0
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3718      	adds	r7, #24
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
 8009ab2:	bf00      	nop
 8009ab4:	40023800 	.word	0x40023800

08009ab8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b084      	sub	sp, #16
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d101      	bne.n	8009acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e0cc      	b.n	8009c66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009acc:	4b68      	ldr	r3, [pc, #416]	; (8009c70 <HAL_RCC_ClockConfig+0x1b8>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f003 0307 	and.w	r3, r3, #7
 8009ad4:	683a      	ldr	r2, [r7, #0]
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d90c      	bls.n	8009af4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ada:	4b65      	ldr	r3, [pc, #404]	; (8009c70 <HAL_RCC_ClockConfig+0x1b8>)
 8009adc:	683a      	ldr	r2, [r7, #0]
 8009ade:	b2d2      	uxtb	r2, r2
 8009ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ae2:	4b63      	ldr	r3, [pc, #396]	; (8009c70 <HAL_RCC_ClockConfig+0x1b8>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f003 0307 	and.w	r3, r3, #7
 8009aea:	683a      	ldr	r2, [r7, #0]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d001      	beq.n	8009af4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009af0:	2301      	movs	r3, #1
 8009af2:	e0b8      	b.n	8009c66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 0302 	and.w	r3, r3, #2
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d020      	beq.n	8009b42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f003 0304 	and.w	r3, r3, #4
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d005      	beq.n	8009b18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009b0c:	4b59      	ldr	r3, [pc, #356]	; (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	4a58      	ldr	r2, [pc, #352]	; (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009b16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 0308 	and.w	r3, r3, #8
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d005      	beq.n	8009b30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009b24:	4b53      	ldr	r3, [pc, #332]	; (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	4a52      	ldr	r2, [pc, #328]	; (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009b2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b30:	4b50      	ldr	r3, [pc, #320]	; (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	494d      	ldr	r1, [pc, #308]	; (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f003 0301 	and.w	r3, r3, #1
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d044      	beq.n	8009bd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d107      	bne.n	8009b66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b56:	4b47      	ldr	r3, [pc, #284]	; (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d119      	bne.n	8009b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	e07f      	b.n	8009c66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d003      	beq.n	8009b76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009b72:	2b03      	cmp	r3, #3
 8009b74:	d107      	bne.n	8009b86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b76:	4b3f      	ldr	r3, [pc, #252]	; (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d109      	bne.n	8009b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	e06f      	b.n	8009c66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b86:	4b3b      	ldr	r3, [pc, #236]	; (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f003 0302 	and.w	r3, r3, #2
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d101      	bne.n	8009b96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e067      	b.n	8009c66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009b96:	4b37      	ldr	r3, [pc, #220]	; (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	f023 0203 	bic.w	r2, r3, #3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	4934      	ldr	r1, [pc, #208]	; (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009ba8:	f7fe ff48 	bl	8008a3c <HAL_GetTick>
 8009bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009bae:	e00a      	b.n	8009bc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009bb0:	f7fe ff44 	bl	8008a3c <HAL_GetTick>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d901      	bls.n	8009bc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	e04f      	b.n	8009c66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009bc6:	4b2b      	ldr	r3, [pc, #172]	; (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	f003 020c 	and.w	r2, r3, #12
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d1eb      	bne.n	8009bb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009bd8:	4b25      	ldr	r3, [pc, #148]	; (8009c70 <HAL_RCC_ClockConfig+0x1b8>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f003 0307 	and.w	r3, r3, #7
 8009be0:	683a      	ldr	r2, [r7, #0]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d20c      	bcs.n	8009c00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009be6:	4b22      	ldr	r3, [pc, #136]	; (8009c70 <HAL_RCC_ClockConfig+0x1b8>)
 8009be8:	683a      	ldr	r2, [r7, #0]
 8009bea:	b2d2      	uxtb	r2, r2
 8009bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009bee:	4b20      	ldr	r3, [pc, #128]	; (8009c70 <HAL_RCC_ClockConfig+0x1b8>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f003 0307 	and.w	r3, r3, #7
 8009bf6:	683a      	ldr	r2, [r7, #0]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d001      	beq.n	8009c00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e032      	b.n	8009c66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f003 0304 	and.w	r3, r3, #4
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d008      	beq.n	8009c1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009c0c:	4b19      	ldr	r3, [pc, #100]	; (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009c0e:	689b      	ldr	r3, [r3, #8]
 8009c10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	4916      	ldr	r1, [pc, #88]	; (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f003 0308 	and.w	r3, r3, #8
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d009      	beq.n	8009c3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009c2a:	4b12      	ldr	r3, [pc, #72]	; (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	00db      	lsls	r3, r3, #3
 8009c38:	490e      	ldr	r1, [pc, #56]	; (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009c3e:	f000 f821 	bl	8009c84 <HAL_RCC_GetSysClockFreq>
 8009c42:	4602      	mov	r2, r0
 8009c44:	4b0b      	ldr	r3, [pc, #44]	; (8009c74 <HAL_RCC_ClockConfig+0x1bc>)
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	091b      	lsrs	r3, r3, #4
 8009c4a:	f003 030f 	and.w	r3, r3, #15
 8009c4e:	490a      	ldr	r1, [pc, #40]	; (8009c78 <HAL_RCC_ClockConfig+0x1c0>)
 8009c50:	5ccb      	ldrb	r3, [r1, r3]
 8009c52:	fa22 f303 	lsr.w	r3, r2, r3
 8009c56:	4a09      	ldr	r2, [pc, #36]	; (8009c7c <HAL_RCC_ClockConfig+0x1c4>)
 8009c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009c5a:	4b09      	ldr	r3, [pc, #36]	; (8009c80 <HAL_RCC_ClockConfig+0x1c8>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7fe fea8 	bl	80089b4 <HAL_InitTick>

  return HAL_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3710      	adds	r7, #16
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	40023c00 	.word	0x40023c00
 8009c74:	40023800 	.word	0x40023800
 8009c78:	0800a7b4 	.word	0x0800a7b4
 8009c7c:	20000000 	.word	0x20000000
 8009c80:	20000004 	.word	0x20000004

08009c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c88:	b094      	sub	sp, #80	; 0x50
 8009c8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	647b      	str	r3, [r7, #68]	; 0x44
 8009c90:	2300      	movs	r3, #0
 8009c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c94:	2300      	movs	r3, #0
 8009c96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009c9c:	4b79      	ldr	r3, [pc, #484]	; (8009e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	f003 030c 	and.w	r3, r3, #12
 8009ca4:	2b08      	cmp	r3, #8
 8009ca6:	d00d      	beq.n	8009cc4 <HAL_RCC_GetSysClockFreq+0x40>
 8009ca8:	2b08      	cmp	r3, #8
 8009caa:	f200 80e1 	bhi.w	8009e70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d002      	beq.n	8009cb8 <HAL_RCC_GetSysClockFreq+0x34>
 8009cb2:	2b04      	cmp	r3, #4
 8009cb4:	d003      	beq.n	8009cbe <HAL_RCC_GetSysClockFreq+0x3a>
 8009cb6:	e0db      	b.n	8009e70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009cb8:	4b73      	ldr	r3, [pc, #460]	; (8009e88 <HAL_RCC_GetSysClockFreq+0x204>)
 8009cba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009cbc:	e0db      	b.n	8009e76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009cbe:	4b73      	ldr	r3, [pc, #460]	; (8009e8c <HAL_RCC_GetSysClockFreq+0x208>)
 8009cc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009cc2:	e0d8      	b.n	8009e76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009cc4:	4b6f      	ldr	r3, [pc, #444]	; (8009e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ccc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009cce:	4b6d      	ldr	r3, [pc, #436]	; (8009e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d063      	beq.n	8009da2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009cda:	4b6a      	ldr	r3, [pc, #424]	; (8009e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	099b      	lsrs	r3, r3, #6
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ce4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cec:	633b      	str	r3, [r7, #48]	; 0x30
 8009cee:	2300      	movs	r3, #0
 8009cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8009cf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009cf6:	4622      	mov	r2, r4
 8009cf8:	462b      	mov	r3, r5
 8009cfa:	f04f 0000 	mov.w	r0, #0
 8009cfe:	f04f 0100 	mov.w	r1, #0
 8009d02:	0159      	lsls	r1, r3, #5
 8009d04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009d08:	0150      	lsls	r0, r2, #5
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	4621      	mov	r1, r4
 8009d10:	1a51      	subs	r1, r2, r1
 8009d12:	6139      	str	r1, [r7, #16]
 8009d14:	4629      	mov	r1, r5
 8009d16:	eb63 0301 	sbc.w	r3, r3, r1
 8009d1a:	617b      	str	r3, [r7, #20]
 8009d1c:	f04f 0200 	mov.w	r2, #0
 8009d20:	f04f 0300 	mov.w	r3, #0
 8009d24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009d28:	4659      	mov	r1, fp
 8009d2a:	018b      	lsls	r3, r1, #6
 8009d2c:	4651      	mov	r1, sl
 8009d2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009d32:	4651      	mov	r1, sl
 8009d34:	018a      	lsls	r2, r1, #6
 8009d36:	4651      	mov	r1, sl
 8009d38:	ebb2 0801 	subs.w	r8, r2, r1
 8009d3c:	4659      	mov	r1, fp
 8009d3e:	eb63 0901 	sbc.w	r9, r3, r1
 8009d42:	f04f 0200 	mov.w	r2, #0
 8009d46:	f04f 0300 	mov.w	r3, #0
 8009d4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009d4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009d52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009d56:	4690      	mov	r8, r2
 8009d58:	4699      	mov	r9, r3
 8009d5a:	4623      	mov	r3, r4
 8009d5c:	eb18 0303 	adds.w	r3, r8, r3
 8009d60:	60bb      	str	r3, [r7, #8]
 8009d62:	462b      	mov	r3, r5
 8009d64:	eb49 0303 	adc.w	r3, r9, r3
 8009d68:	60fb      	str	r3, [r7, #12]
 8009d6a:	f04f 0200 	mov.w	r2, #0
 8009d6e:	f04f 0300 	mov.w	r3, #0
 8009d72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009d76:	4629      	mov	r1, r5
 8009d78:	024b      	lsls	r3, r1, #9
 8009d7a:	4621      	mov	r1, r4
 8009d7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009d80:	4621      	mov	r1, r4
 8009d82:	024a      	lsls	r2, r1, #9
 8009d84:	4610      	mov	r0, r2
 8009d86:	4619      	mov	r1, r3
 8009d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009d90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d94:	f7fe f954 	bl	8008040 <__aeabi_uldivmod>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009da0:	e058      	b.n	8009e54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009da2:	4b38      	ldr	r3, [pc, #224]	; (8009e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	099b      	lsrs	r3, r3, #6
 8009da8:	2200      	movs	r2, #0
 8009daa:	4618      	mov	r0, r3
 8009dac:	4611      	mov	r1, r2
 8009dae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009db2:	623b      	str	r3, [r7, #32]
 8009db4:	2300      	movs	r3, #0
 8009db6:	627b      	str	r3, [r7, #36]	; 0x24
 8009db8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009dbc:	4642      	mov	r2, r8
 8009dbe:	464b      	mov	r3, r9
 8009dc0:	f04f 0000 	mov.w	r0, #0
 8009dc4:	f04f 0100 	mov.w	r1, #0
 8009dc8:	0159      	lsls	r1, r3, #5
 8009dca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009dce:	0150      	lsls	r0, r2, #5
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	4641      	mov	r1, r8
 8009dd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8009dda:	4649      	mov	r1, r9
 8009ddc:	eb63 0b01 	sbc.w	fp, r3, r1
 8009de0:	f04f 0200 	mov.w	r2, #0
 8009de4:	f04f 0300 	mov.w	r3, #0
 8009de8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009dec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009df0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009df4:	ebb2 040a 	subs.w	r4, r2, sl
 8009df8:	eb63 050b 	sbc.w	r5, r3, fp
 8009dfc:	f04f 0200 	mov.w	r2, #0
 8009e00:	f04f 0300 	mov.w	r3, #0
 8009e04:	00eb      	lsls	r3, r5, #3
 8009e06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009e0a:	00e2      	lsls	r2, r4, #3
 8009e0c:	4614      	mov	r4, r2
 8009e0e:	461d      	mov	r5, r3
 8009e10:	4643      	mov	r3, r8
 8009e12:	18e3      	adds	r3, r4, r3
 8009e14:	603b      	str	r3, [r7, #0]
 8009e16:	464b      	mov	r3, r9
 8009e18:	eb45 0303 	adc.w	r3, r5, r3
 8009e1c:	607b      	str	r3, [r7, #4]
 8009e1e:	f04f 0200 	mov.w	r2, #0
 8009e22:	f04f 0300 	mov.w	r3, #0
 8009e26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009e2a:	4629      	mov	r1, r5
 8009e2c:	028b      	lsls	r3, r1, #10
 8009e2e:	4621      	mov	r1, r4
 8009e30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009e34:	4621      	mov	r1, r4
 8009e36:	028a      	lsls	r2, r1, #10
 8009e38:	4610      	mov	r0, r2
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e3e:	2200      	movs	r2, #0
 8009e40:	61bb      	str	r3, [r7, #24]
 8009e42:	61fa      	str	r2, [r7, #28]
 8009e44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e48:	f7fe f8fa 	bl	8008040 <__aeabi_uldivmod>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	460b      	mov	r3, r1
 8009e50:	4613      	mov	r3, r2
 8009e52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009e54:	4b0b      	ldr	r3, [pc, #44]	; (8009e84 <HAL_RCC_GetSysClockFreq+0x200>)
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	0c1b      	lsrs	r3, r3, #16
 8009e5a:	f003 0303 	and.w	r3, r3, #3
 8009e5e:	3301      	adds	r3, #1
 8009e60:	005b      	lsls	r3, r3, #1
 8009e62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009e64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009e6e:	e002      	b.n	8009e76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009e70:	4b05      	ldr	r3, [pc, #20]	; (8009e88 <HAL_RCC_GetSysClockFreq+0x204>)
 8009e72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009e74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3750      	adds	r7, #80	; 0x50
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e82:	bf00      	nop
 8009e84:	40023800 	.word	0x40023800
 8009e88:	00f42400 	.word	0x00f42400
 8009e8c:	007a1200 	.word	0x007a1200

08009e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e90:	b480      	push	{r7}
 8009e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009e94:	4b03      	ldr	r3, [pc, #12]	; (8009ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009e96:	681b      	ldr	r3, [r3, #0]
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	20000000 	.word	0x20000000

08009ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009eac:	f7ff fff0 	bl	8009e90 <HAL_RCC_GetHCLKFreq>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	4b05      	ldr	r3, [pc, #20]	; (8009ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	0a9b      	lsrs	r3, r3, #10
 8009eb8:	f003 0307 	and.w	r3, r3, #7
 8009ebc:	4903      	ldr	r1, [pc, #12]	; (8009ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8009ebe:	5ccb      	ldrb	r3, [r1, r3]
 8009ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	40023800 	.word	0x40023800
 8009ecc:	0800a7c4 	.word	0x0800a7c4

08009ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009ed4:	f7ff ffdc 	bl	8009e90 <HAL_RCC_GetHCLKFreq>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	4b05      	ldr	r3, [pc, #20]	; (8009ef0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	0b5b      	lsrs	r3, r3, #13
 8009ee0:	f003 0307 	and.w	r3, r3, #7
 8009ee4:	4903      	ldr	r1, [pc, #12]	; (8009ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009ee6:	5ccb      	ldrb	r3, [r1, r3]
 8009ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	40023800 	.word	0x40023800
 8009ef4:	0800a7c4 	.word	0x0800a7c4

08009ef8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d101      	bne.n	8009f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e042      	b.n	8009f90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d106      	bne.n	8009f24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f7fe fc78 	bl	8008814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2224      	movs	r2, #36	; 0x24
 8009f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	68da      	ldr	r2, [r3, #12]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 f97f 	bl	800a240 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	691a      	ldr	r2, [r3, #16]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	695a      	ldr	r2, [r3, #20]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68da      	ldr	r2, [r3, #12]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2220      	movs	r2, #32
 8009f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2220      	movs	r2, #32
 8009f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009f8e:	2300      	movs	r3, #0
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b08a      	sub	sp, #40	; 0x28
 8009f9c:	af02      	add	r7, sp, #8
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	603b      	str	r3, [r7, #0]
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	2b20      	cmp	r3, #32
 8009fb6:	f040 8081 	bne.w	800a0bc <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d002      	beq.n	8009fc6 <HAL_UART_Receive+0x2e>
 8009fc0:	88fb      	ldrh	r3, [r7, #6]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d101      	bne.n	8009fca <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e079      	b.n	800a0be <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2222      	movs	r2, #34	; 0x22
 8009fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009fde:	f7fe fd2d 	bl	8008a3c <HAL_GetTick>
 8009fe2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	88fa      	ldrh	r2, [r7, #6]
 8009fe8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	88fa      	ldrh	r2, [r7, #6]
 8009fee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ff8:	d108      	bne.n	800a00c <HAL_UART_Receive+0x74>
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	691b      	ldr	r3, [r3, #16]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d104      	bne.n	800a00c <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800a002:	2300      	movs	r3, #0
 800a004:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	61bb      	str	r3, [r7, #24]
 800a00a:	e003      	b.n	800a014 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a010:	2300      	movs	r3, #0
 800a012:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a014:	e047      	b.n	800a0a6 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	9300      	str	r3, [sp, #0]
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	2200      	movs	r2, #0
 800a01e:	2120      	movs	r1, #32
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f000 f850 	bl	800a0c6 <UART_WaitOnFlagUntilTimeout>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d005      	beq.n	800a038 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2220      	movs	r2, #32
 800a030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 800a034:	2303      	movs	r3, #3
 800a036:	e042      	b.n	800a0be <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d10c      	bne.n	800a058 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	b29b      	uxth	r3, r3
 800a046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a04a:	b29a      	uxth	r2, r3
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a050:	69bb      	ldr	r3, [r7, #24]
 800a052:	3302      	adds	r3, #2
 800a054:	61bb      	str	r3, [r7, #24]
 800a056:	e01f      	b.n	800a098 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a060:	d007      	beq.n	800a072 <HAL_UART_Receive+0xda>
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d10a      	bne.n	800a080 <HAL_UART_Receive+0xe8>
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	691b      	ldr	r3, [r3, #16]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d106      	bne.n	800a080 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	b2da      	uxtb	r2, r3
 800a07a:	69fb      	ldr	r3, [r7, #28]
 800a07c:	701a      	strb	r2, [r3, #0]
 800a07e:	e008      	b.n	800a092 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	b2db      	uxtb	r3, r3
 800a088:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a08c:	b2da      	uxtb	r2, r3
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	3301      	adds	r3, #1
 800a096:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	b29a      	uxth	r2, r3
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d1b2      	bne.n	800a016 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2220      	movs	r2, #32
 800a0b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	e000      	b.n	800a0be <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800a0bc:	2302      	movs	r3, #2
  }
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3720      	adds	r7, #32
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b086      	sub	sp, #24
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	60f8      	str	r0, [r7, #12]
 800a0ce:	60b9      	str	r1, [r7, #8]
 800a0d0:	603b      	str	r3, [r7, #0]
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0d6:	e03b      	b.n	800a150 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0d8:	6a3b      	ldr	r3, [r7, #32]
 800a0da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0de:	d037      	beq.n	800a150 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0e0:	f7fe fcac 	bl	8008a3c <HAL_GetTick>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	1ad3      	subs	r3, r2, r3
 800a0ea:	6a3a      	ldr	r2, [r7, #32]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d302      	bcc.n	800a0f6 <UART_WaitOnFlagUntilTimeout+0x30>
 800a0f0:	6a3b      	ldr	r3, [r7, #32]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d101      	bne.n	800a0fa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	e03a      	b.n	800a170 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	f003 0304 	and.w	r3, r3, #4
 800a104:	2b00      	cmp	r3, #0
 800a106:	d023      	beq.n	800a150 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	2b80      	cmp	r3, #128	; 0x80
 800a10c:	d020      	beq.n	800a150 <UART_WaitOnFlagUntilTimeout+0x8a>
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	2b40      	cmp	r3, #64	; 0x40
 800a112:	d01d      	beq.n	800a150 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f003 0308 	and.w	r3, r3, #8
 800a11e:	2b08      	cmp	r3, #8
 800a120:	d116      	bne.n	800a150 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800a122:	2300      	movs	r3, #0
 800a124:	617b      	str	r3, [r7, #20]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	617b      	str	r3, [r7, #20]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	617b      	str	r3, [r7, #20]
 800a136:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a138:	68f8      	ldr	r0, [r7, #12]
 800a13a:	f000 f81d 	bl	800a178 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2208      	movs	r2, #8
 800a142:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2200      	movs	r2, #0
 800a148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	e00f      	b.n	800a170 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	4013      	ands	r3, r2
 800a15a:	68ba      	ldr	r2, [r7, #8]
 800a15c:	429a      	cmp	r2, r3
 800a15e:	bf0c      	ite	eq
 800a160:	2301      	moveq	r3, #1
 800a162:	2300      	movne	r3, #0
 800a164:	b2db      	uxtb	r3, r3
 800a166:	461a      	mov	r2, r3
 800a168:	79fb      	ldrb	r3, [r7, #7]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d0b4      	beq.n	800a0d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	3718      	adds	r7, #24
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a178:	b480      	push	{r7}
 800a17a:	b095      	sub	sp, #84	; 0x54
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	330c      	adds	r3, #12
 800a186:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a18a:	e853 3f00 	ldrex	r3, [r3]
 800a18e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a192:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a196:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	330c      	adds	r3, #12
 800a19e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a1a0:	643a      	str	r2, [r7, #64]	; 0x40
 800a1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a1a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a1a8:	e841 2300 	strex	r3, r2, [r1]
 800a1ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1e5      	bne.n	800a180 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	3314      	adds	r3, #20
 800a1ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1bc:	6a3b      	ldr	r3, [r7, #32]
 800a1be:	e853 3f00 	ldrex	r3, [r3]
 800a1c2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	f023 0301 	bic.w	r3, r3, #1
 800a1ca:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	3314      	adds	r3, #20
 800a1d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a1d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1dc:	e841 2300 	strex	r3, r2, [r1]
 800a1e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d1e5      	bne.n	800a1b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d119      	bne.n	800a224 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	330c      	adds	r3, #12
 800a1f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	e853 3f00 	ldrex	r3, [r3]
 800a1fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	f023 0310 	bic.w	r3, r3, #16
 800a206:	647b      	str	r3, [r7, #68]	; 0x44
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	330c      	adds	r3, #12
 800a20e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a210:	61ba      	str	r2, [r7, #24]
 800a212:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a214:	6979      	ldr	r1, [r7, #20]
 800a216:	69ba      	ldr	r2, [r7, #24]
 800a218:	e841 2300 	strex	r3, r2, [r1]
 800a21c:	613b      	str	r3, [r7, #16]
   return(result);
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d1e5      	bne.n	800a1f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2220      	movs	r2, #32
 800a228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a232:	bf00      	nop
 800a234:	3754      	adds	r7, #84	; 0x54
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr
	...

0800a240 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a244:	b0c0      	sub	sp, #256	; 0x100
 800a246:	af00      	add	r7, sp, #0
 800a248:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a24c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	691b      	ldr	r3, [r3, #16]
 800a254:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a25c:	68d9      	ldr	r1, [r3, #12]
 800a25e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	ea40 0301 	orr.w	r3, r0, r1
 800a268:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a26a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a26e:	689a      	ldr	r2, [r3, #8]
 800a270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a274:	691b      	ldr	r3, [r3, #16]
 800a276:	431a      	orrs	r2, r3
 800a278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a27c:	695b      	ldr	r3, [r3, #20]
 800a27e:	431a      	orrs	r2, r3
 800a280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a284:	69db      	ldr	r3, [r3, #28]
 800a286:	4313      	orrs	r3, r2
 800a288:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a28c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a298:	f021 010c 	bic.w	r1, r1, #12
 800a29c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a2a6:	430b      	orrs	r3, r1
 800a2a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a2aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	695b      	ldr	r3, [r3, #20]
 800a2b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a2b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2ba:	6999      	ldr	r1, [r3, #24]
 800a2bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	ea40 0301 	orr.w	r3, r0, r1
 800a2c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a2c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	4b8f      	ldr	r3, [pc, #572]	; (800a50c <UART_SetConfig+0x2cc>)
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d005      	beq.n	800a2e0 <UART_SetConfig+0xa0>
 800a2d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2d8:	681a      	ldr	r2, [r3, #0]
 800a2da:	4b8d      	ldr	r3, [pc, #564]	; (800a510 <UART_SetConfig+0x2d0>)
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d104      	bne.n	800a2ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a2e0:	f7ff fdf6 	bl	8009ed0 <HAL_RCC_GetPCLK2Freq>
 800a2e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a2e8:	e003      	b.n	800a2f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a2ea:	f7ff fddd 	bl	8009ea8 <HAL_RCC_GetPCLK1Freq>
 800a2ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2f6:	69db      	ldr	r3, [r3, #28]
 800a2f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2fc:	f040 810c 	bne.w	800a518 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a304:	2200      	movs	r2, #0
 800a306:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a30a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a30e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a312:	4622      	mov	r2, r4
 800a314:	462b      	mov	r3, r5
 800a316:	1891      	adds	r1, r2, r2
 800a318:	65b9      	str	r1, [r7, #88]	; 0x58
 800a31a:	415b      	adcs	r3, r3
 800a31c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a31e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a322:	4621      	mov	r1, r4
 800a324:	eb12 0801 	adds.w	r8, r2, r1
 800a328:	4629      	mov	r1, r5
 800a32a:	eb43 0901 	adc.w	r9, r3, r1
 800a32e:	f04f 0200 	mov.w	r2, #0
 800a332:	f04f 0300 	mov.w	r3, #0
 800a336:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a33a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a33e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a342:	4690      	mov	r8, r2
 800a344:	4699      	mov	r9, r3
 800a346:	4623      	mov	r3, r4
 800a348:	eb18 0303 	adds.w	r3, r8, r3
 800a34c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a350:	462b      	mov	r3, r5
 800a352:	eb49 0303 	adc.w	r3, r9, r3
 800a356:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a35a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a366:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a36a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a36e:	460b      	mov	r3, r1
 800a370:	18db      	adds	r3, r3, r3
 800a372:	653b      	str	r3, [r7, #80]	; 0x50
 800a374:	4613      	mov	r3, r2
 800a376:	eb42 0303 	adc.w	r3, r2, r3
 800a37a:	657b      	str	r3, [r7, #84]	; 0x54
 800a37c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a380:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a384:	f7fd fe5c 	bl	8008040 <__aeabi_uldivmod>
 800a388:	4602      	mov	r2, r0
 800a38a:	460b      	mov	r3, r1
 800a38c:	4b61      	ldr	r3, [pc, #388]	; (800a514 <UART_SetConfig+0x2d4>)
 800a38e:	fba3 2302 	umull	r2, r3, r3, r2
 800a392:	095b      	lsrs	r3, r3, #5
 800a394:	011c      	lsls	r4, r3, #4
 800a396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a39a:	2200      	movs	r2, #0
 800a39c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a3a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a3a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a3a8:	4642      	mov	r2, r8
 800a3aa:	464b      	mov	r3, r9
 800a3ac:	1891      	adds	r1, r2, r2
 800a3ae:	64b9      	str	r1, [r7, #72]	; 0x48
 800a3b0:	415b      	adcs	r3, r3
 800a3b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a3b8:	4641      	mov	r1, r8
 800a3ba:	eb12 0a01 	adds.w	sl, r2, r1
 800a3be:	4649      	mov	r1, r9
 800a3c0:	eb43 0b01 	adc.w	fp, r3, r1
 800a3c4:	f04f 0200 	mov.w	r2, #0
 800a3c8:	f04f 0300 	mov.w	r3, #0
 800a3cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a3d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a3d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a3d8:	4692      	mov	sl, r2
 800a3da:	469b      	mov	fp, r3
 800a3dc:	4643      	mov	r3, r8
 800a3de:	eb1a 0303 	adds.w	r3, sl, r3
 800a3e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a3e6:	464b      	mov	r3, r9
 800a3e8:	eb4b 0303 	adc.w	r3, fp, r3
 800a3ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a3f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a3fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a400:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a404:	460b      	mov	r3, r1
 800a406:	18db      	adds	r3, r3, r3
 800a408:	643b      	str	r3, [r7, #64]	; 0x40
 800a40a:	4613      	mov	r3, r2
 800a40c:	eb42 0303 	adc.w	r3, r2, r3
 800a410:	647b      	str	r3, [r7, #68]	; 0x44
 800a412:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a416:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a41a:	f7fd fe11 	bl	8008040 <__aeabi_uldivmod>
 800a41e:	4602      	mov	r2, r0
 800a420:	460b      	mov	r3, r1
 800a422:	4611      	mov	r1, r2
 800a424:	4b3b      	ldr	r3, [pc, #236]	; (800a514 <UART_SetConfig+0x2d4>)
 800a426:	fba3 2301 	umull	r2, r3, r3, r1
 800a42a:	095b      	lsrs	r3, r3, #5
 800a42c:	2264      	movs	r2, #100	; 0x64
 800a42e:	fb02 f303 	mul.w	r3, r2, r3
 800a432:	1acb      	subs	r3, r1, r3
 800a434:	00db      	lsls	r3, r3, #3
 800a436:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a43a:	4b36      	ldr	r3, [pc, #216]	; (800a514 <UART_SetConfig+0x2d4>)
 800a43c:	fba3 2302 	umull	r2, r3, r3, r2
 800a440:	095b      	lsrs	r3, r3, #5
 800a442:	005b      	lsls	r3, r3, #1
 800a444:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a448:	441c      	add	r4, r3
 800a44a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a44e:	2200      	movs	r2, #0
 800a450:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a454:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a458:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a45c:	4642      	mov	r2, r8
 800a45e:	464b      	mov	r3, r9
 800a460:	1891      	adds	r1, r2, r2
 800a462:	63b9      	str	r1, [r7, #56]	; 0x38
 800a464:	415b      	adcs	r3, r3
 800a466:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a468:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a46c:	4641      	mov	r1, r8
 800a46e:	1851      	adds	r1, r2, r1
 800a470:	6339      	str	r1, [r7, #48]	; 0x30
 800a472:	4649      	mov	r1, r9
 800a474:	414b      	adcs	r3, r1
 800a476:	637b      	str	r3, [r7, #52]	; 0x34
 800a478:	f04f 0200 	mov.w	r2, #0
 800a47c:	f04f 0300 	mov.w	r3, #0
 800a480:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a484:	4659      	mov	r1, fp
 800a486:	00cb      	lsls	r3, r1, #3
 800a488:	4651      	mov	r1, sl
 800a48a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a48e:	4651      	mov	r1, sl
 800a490:	00ca      	lsls	r2, r1, #3
 800a492:	4610      	mov	r0, r2
 800a494:	4619      	mov	r1, r3
 800a496:	4603      	mov	r3, r0
 800a498:	4642      	mov	r2, r8
 800a49a:	189b      	adds	r3, r3, r2
 800a49c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a4a0:	464b      	mov	r3, r9
 800a4a2:	460a      	mov	r2, r1
 800a4a4:	eb42 0303 	adc.w	r3, r2, r3
 800a4a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a4ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a4b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a4bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	18db      	adds	r3, r3, r3
 800a4c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4c6:	4613      	mov	r3, r2
 800a4c8:	eb42 0303 	adc.w	r3, r2, r3
 800a4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a4d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a4d6:	f7fd fdb3 	bl	8008040 <__aeabi_uldivmod>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	460b      	mov	r3, r1
 800a4de:	4b0d      	ldr	r3, [pc, #52]	; (800a514 <UART_SetConfig+0x2d4>)
 800a4e0:	fba3 1302 	umull	r1, r3, r3, r2
 800a4e4:	095b      	lsrs	r3, r3, #5
 800a4e6:	2164      	movs	r1, #100	; 0x64
 800a4e8:	fb01 f303 	mul.w	r3, r1, r3
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	00db      	lsls	r3, r3, #3
 800a4f0:	3332      	adds	r3, #50	; 0x32
 800a4f2:	4a08      	ldr	r2, [pc, #32]	; (800a514 <UART_SetConfig+0x2d4>)
 800a4f4:	fba2 2303 	umull	r2, r3, r2, r3
 800a4f8:	095b      	lsrs	r3, r3, #5
 800a4fa:	f003 0207 	and.w	r2, r3, #7
 800a4fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4422      	add	r2, r4
 800a506:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a508:	e106      	b.n	800a718 <UART_SetConfig+0x4d8>
 800a50a:	bf00      	nop
 800a50c:	40011000 	.word	0x40011000
 800a510:	40011400 	.word	0x40011400
 800a514:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a51c:	2200      	movs	r2, #0
 800a51e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a522:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a526:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a52a:	4642      	mov	r2, r8
 800a52c:	464b      	mov	r3, r9
 800a52e:	1891      	adds	r1, r2, r2
 800a530:	6239      	str	r1, [r7, #32]
 800a532:	415b      	adcs	r3, r3
 800a534:	627b      	str	r3, [r7, #36]	; 0x24
 800a536:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a53a:	4641      	mov	r1, r8
 800a53c:	1854      	adds	r4, r2, r1
 800a53e:	4649      	mov	r1, r9
 800a540:	eb43 0501 	adc.w	r5, r3, r1
 800a544:	f04f 0200 	mov.w	r2, #0
 800a548:	f04f 0300 	mov.w	r3, #0
 800a54c:	00eb      	lsls	r3, r5, #3
 800a54e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a552:	00e2      	lsls	r2, r4, #3
 800a554:	4614      	mov	r4, r2
 800a556:	461d      	mov	r5, r3
 800a558:	4643      	mov	r3, r8
 800a55a:	18e3      	adds	r3, r4, r3
 800a55c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a560:	464b      	mov	r3, r9
 800a562:	eb45 0303 	adc.w	r3, r5, r3
 800a566:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a56a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a576:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a57a:	f04f 0200 	mov.w	r2, #0
 800a57e:	f04f 0300 	mov.w	r3, #0
 800a582:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a586:	4629      	mov	r1, r5
 800a588:	008b      	lsls	r3, r1, #2
 800a58a:	4621      	mov	r1, r4
 800a58c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a590:	4621      	mov	r1, r4
 800a592:	008a      	lsls	r2, r1, #2
 800a594:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a598:	f7fd fd52 	bl	8008040 <__aeabi_uldivmod>
 800a59c:	4602      	mov	r2, r0
 800a59e:	460b      	mov	r3, r1
 800a5a0:	4b60      	ldr	r3, [pc, #384]	; (800a724 <UART_SetConfig+0x4e4>)
 800a5a2:	fba3 2302 	umull	r2, r3, r3, r2
 800a5a6:	095b      	lsrs	r3, r3, #5
 800a5a8:	011c      	lsls	r4, r3, #4
 800a5aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a5b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a5b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a5bc:	4642      	mov	r2, r8
 800a5be:	464b      	mov	r3, r9
 800a5c0:	1891      	adds	r1, r2, r2
 800a5c2:	61b9      	str	r1, [r7, #24]
 800a5c4:	415b      	adcs	r3, r3
 800a5c6:	61fb      	str	r3, [r7, #28]
 800a5c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a5cc:	4641      	mov	r1, r8
 800a5ce:	1851      	adds	r1, r2, r1
 800a5d0:	6139      	str	r1, [r7, #16]
 800a5d2:	4649      	mov	r1, r9
 800a5d4:	414b      	adcs	r3, r1
 800a5d6:	617b      	str	r3, [r7, #20]
 800a5d8:	f04f 0200 	mov.w	r2, #0
 800a5dc:	f04f 0300 	mov.w	r3, #0
 800a5e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a5e4:	4659      	mov	r1, fp
 800a5e6:	00cb      	lsls	r3, r1, #3
 800a5e8:	4651      	mov	r1, sl
 800a5ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a5ee:	4651      	mov	r1, sl
 800a5f0:	00ca      	lsls	r2, r1, #3
 800a5f2:	4610      	mov	r0, r2
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	4642      	mov	r2, r8
 800a5fa:	189b      	adds	r3, r3, r2
 800a5fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a600:	464b      	mov	r3, r9
 800a602:	460a      	mov	r2, r1
 800a604:	eb42 0303 	adc.w	r3, r2, r3
 800a608:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a60c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	2200      	movs	r2, #0
 800a614:	67bb      	str	r3, [r7, #120]	; 0x78
 800a616:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a618:	f04f 0200 	mov.w	r2, #0
 800a61c:	f04f 0300 	mov.w	r3, #0
 800a620:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a624:	4649      	mov	r1, r9
 800a626:	008b      	lsls	r3, r1, #2
 800a628:	4641      	mov	r1, r8
 800a62a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a62e:	4641      	mov	r1, r8
 800a630:	008a      	lsls	r2, r1, #2
 800a632:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a636:	f7fd fd03 	bl	8008040 <__aeabi_uldivmod>
 800a63a:	4602      	mov	r2, r0
 800a63c:	460b      	mov	r3, r1
 800a63e:	4611      	mov	r1, r2
 800a640:	4b38      	ldr	r3, [pc, #224]	; (800a724 <UART_SetConfig+0x4e4>)
 800a642:	fba3 2301 	umull	r2, r3, r3, r1
 800a646:	095b      	lsrs	r3, r3, #5
 800a648:	2264      	movs	r2, #100	; 0x64
 800a64a:	fb02 f303 	mul.w	r3, r2, r3
 800a64e:	1acb      	subs	r3, r1, r3
 800a650:	011b      	lsls	r3, r3, #4
 800a652:	3332      	adds	r3, #50	; 0x32
 800a654:	4a33      	ldr	r2, [pc, #204]	; (800a724 <UART_SetConfig+0x4e4>)
 800a656:	fba2 2303 	umull	r2, r3, r2, r3
 800a65a:	095b      	lsrs	r3, r3, #5
 800a65c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a660:	441c      	add	r4, r3
 800a662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a666:	2200      	movs	r2, #0
 800a668:	673b      	str	r3, [r7, #112]	; 0x70
 800a66a:	677a      	str	r2, [r7, #116]	; 0x74
 800a66c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a670:	4642      	mov	r2, r8
 800a672:	464b      	mov	r3, r9
 800a674:	1891      	adds	r1, r2, r2
 800a676:	60b9      	str	r1, [r7, #8]
 800a678:	415b      	adcs	r3, r3
 800a67a:	60fb      	str	r3, [r7, #12]
 800a67c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a680:	4641      	mov	r1, r8
 800a682:	1851      	adds	r1, r2, r1
 800a684:	6039      	str	r1, [r7, #0]
 800a686:	4649      	mov	r1, r9
 800a688:	414b      	adcs	r3, r1
 800a68a:	607b      	str	r3, [r7, #4]
 800a68c:	f04f 0200 	mov.w	r2, #0
 800a690:	f04f 0300 	mov.w	r3, #0
 800a694:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a698:	4659      	mov	r1, fp
 800a69a:	00cb      	lsls	r3, r1, #3
 800a69c:	4651      	mov	r1, sl
 800a69e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a6a2:	4651      	mov	r1, sl
 800a6a4:	00ca      	lsls	r2, r1, #3
 800a6a6:	4610      	mov	r0, r2
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	4642      	mov	r2, r8
 800a6ae:	189b      	adds	r3, r3, r2
 800a6b0:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6b2:	464b      	mov	r3, r9
 800a6b4:	460a      	mov	r2, r1
 800a6b6:	eb42 0303 	adc.w	r3, r2, r3
 800a6ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a6bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	663b      	str	r3, [r7, #96]	; 0x60
 800a6c6:	667a      	str	r2, [r7, #100]	; 0x64
 800a6c8:	f04f 0200 	mov.w	r2, #0
 800a6cc:	f04f 0300 	mov.w	r3, #0
 800a6d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a6d4:	4649      	mov	r1, r9
 800a6d6:	008b      	lsls	r3, r1, #2
 800a6d8:	4641      	mov	r1, r8
 800a6da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a6de:	4641      	mov	r1, r8
 800a6e0:	008a      	lsls	r2, r1, #2
 800a6e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a6e6:	f7fd fcab 	bl	8008040 <__aeabi_uldivmod>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	4b0d      	ldr	r3, [pc, #52]	; (800a724 <UART_SetConfig+0x4e4>)
 800a6f0:	fba3 1302 	umull	r1, r3, r3, r2
 800a6f4:	095b      	lsrs	r3, r3, #5
 800a6f6:	2164      	movs	r1, #100	; 0x64
 800a6f8:	fb01 f303 	mul.w	r3, r1, r3
 800a6fc:	1ad3      	subs	r3, r2, r3
 800a6fe:	011b      	lsls	r3, r3, #4
 800a700:	3332      	adds	r3, #50	; 0x32
 800a702:	4a08      	ldr	r2, [pc, #32]	; (800a724 <UART_SetConfig+0x4e4>)
 800a704:	fba2 2303 	umull	r2, r3, r2, r3
 800a708:	095b      	lsrs	r3, r3, #5
 800a70a:	f003 020f 	and.w	r2, r3, #15
 800a70e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4422      	add	r2, r4
 800a716:	609a      	str	r2, [r3, #8]
}
 800a718:	bf00      	nop
 800a71a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a71e:	46bd      	mov	sp, r7
 800a720:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a724:	51eb851f 	.word	0x51eb851f

0800a728 <memset>:
 800a728:	4402      	add	r2, r0
 800a72a:	4603      	mov	r3, r0
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d100      	bne.n	800a732 <memset+0xa>
 800a730:	4770      	bx	lr
 800a732:	f803 1b01 	strb.w	r1, [r3], #1
 800a736:	e7f9      	b.n	800a72c <memset+0x4>

0800a738 <__libc_init_array>:
 800a738:	b570      	push	{r4, r5, r6, lr}
 800a73a:	4d0d      	ldr	r5, [pc, #52]	; (800a770 <__libc_init_array+0x38>)
 800a73c:	4c0d      	ldr	r4, [pc, #52]	; (800a774 <__libc_init_array+0x3c>)
 800a73e:	1b64      	subs	r4, r4, r5
 800a740:	10a4      	asrs	r4, r4, #2
 800a742:	2600      	movs	r6, #0
 800a744:	42a6      	cmp	r6, r4
 800a746:	d109      	bne.n	800a75c <__libc_init_array+0x24>
 800a748:	4d0b      	ldr	r5, [pc, #44]	; (800a778 <__libc_init_array+0x40>)
 800a74a:	4c0c      	ldr	r4, [pc, #48]	; (800a77c <__libc_init_array+0x44>)
 800a74c:	f000 f826 	bl	800a79c <_init>
 800a750:	1b64      	subs	r4, r4, r5
 800a752:	10a4      	asrs	r4, r4, #2
 800a754:	2600      	movs	r6, #0
 800a756:	42a6      	cmp	r6, r4
 800a758:	d105      	bne.n	800a766 <__libc_init_array+0x2e>
 800a75a:	bd70      	pop	{r4, r5, r6, pc}
 800a75c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a760:	4798      	blx	r3
 800a762:	3601      	adds	r6, #1
 800a764:	e7ee      	b.n	800a744 <__libc_init_array+0xc>
 800a766:	f855 3b04 	ldr.w	r3, [r5], #4
 800a76a:	4798      	blx	r3
 800a76c:	3601      	adds	r6, #1
 800a76e:	e7f2      	b.n	800a756 <__libc_init_array+0x1e>
 800a770:	0800a7d4 	.word	0x0800a7d4
 800a774:	0800a7d4 	.word	0x0800a7d4
 800a778:	0800a7d4 	.word	0x0800a7d4
 800a77c:	0800a7d8 	.word	0x0800a7d8

0800a780 <memcpy>:
 800a780:	440a      	add	r2, r1
 800a782:	4291      	cmp	r1, r2
 800a784:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a788:	d100      	bne.n	800a78c <memcpy+0xc>
 800a78a:	4770      	bx	lr
 800a78c:	b510      	push	{r4, lr}
 800a78e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a792:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a796:	4291      	cmp	r1, r2
 800a798:	d1f9      	bne.n	800a78e <memcpy+0xe>
 800a79a:	bd10      	pop	{r4, pc}

0800a79c <_init>:
 800a79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a79e:	bf00      	nop
 800a7a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7a2:	bc08      	pop	{r3}
 800a7a4:	469e      	mov	lr, r3
 800a7a6:	4770      	bx	lr

0800a7a8 <_fini>:
 800a7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7aa:	bf00      	nop
 800a7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ae:	bc08      	pop	{r3}
 800a7b0:	469e      	mov	lr, r3
 800a7b2:	4770      	bx	lr
